<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Steam Deck双系统共享同一个蓝牙设备</title>
    <link href="/2023/12/24/4f74780116f5/"/>
    <url>/2023/12/24/4f74780116f5/</url>
    
    <content type="html"><![CDATA[<h1 id="需求概述"><a href="#需求概述" class="headerlink" title="需求概述"></a>需求概述</h1><p>Steam Deck安装完双系统后，发现蓝牙键盘只能在一个系统里被记住，例如连上了<code>Steam OS</code>后，进入<code>Windows</code>则需要重新配对，再切换回来又要重新配对，非常不方便。解决方案是通过修改<code>Link Key</code>来实现一个蓝牙设备免配对无痛切换系统。</p><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li><code>Steam OS</code>配对蓝牙<br>让蓝牙键盘先配对上<code>Steam OS</code>。</li><li><code>Windows 10</code>配对蓝牙<br>接着重启切换系统进入<code>Windows 10</code>，也进行蓝牙配对。</li><li>获得<code>Link Key</code><br>在<code>Windows 10</code>系统下载<a href="http://live.sysinternals.com/psexec.exe"><code>psexec.exe</code></a>工具，以管理员身份打开命令指示符<code>CMD</code></li></ol><p><img src="/img/2023-12-24/cmd.png"></p><p>进入<code>psexec.exe</code>所在目录（这里为<code>下载</code>文件夹<code>Downloads</code>）</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">cd</span> <span class="hljs-variable">%UserProfile%</span>\Downloads\<br></code></pre></td></tr></table></figure><p>接着通过<code>psexec.exe</code>获取当前蓝牙设备配对信息并保存到新创建桌面的注册表文件<code>BTKeys.reg</code></p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">psexec.exe -s -i regedit /e <span class="hljs-variable">%UserProfile%</span>\Desktop\BTKeys.reg HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\BTHPORT\Parameters\Keys<br></code></pre></td></tr></table></figure><p><img src="/img/2023-12-24/SaveBluetooth.png"></p><ol start="4"><li>查看获得的<code>Link Key</code></li></ol><p><img src="/img/2023-12-24/OpenReg.png"></p><p>右键编辑得到的<code>BTKeys.reg</code>，内容如下</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br>[HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\BTHPORT\Parameters\Keys]<br><br>[HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\BTHPORT\Parameters\Keys\<span class="hljs-number">14</span>d4240ae880]<br><span class="hljs-string">&quot;907f61917464&quot;</span>=<span class="hljs-name">hex</span>:<span class="hljs-number">44</span>,ac,<span class="hljs-number">4</span>a,e9,b6,<span class="hljs-number">40</span>,d4,ee,<span class="hljs-number">04</span>,e3,<span class="hljs-number">46</span>,<span class="hljs-number">27</span>,<span class="hljs-number">08</span>,<span class="hljs-number">8</span>a,<span class="hljs-number">31</span>,a3<br></code></pre></td></tr></table></figure><p>其中<code>14d4240ae880</code>为内置蓝牙的MAC地址，<code>907f61917464</code>为我的蓝牙键盘的地址（<code>Windows 10</code>只连了一个蓝牙设备）。<code>hex</code>后面的<code>44,ac,4a,e9,b6,40,d4,ee,04,e3,46,27,08,8a,31,a3</code>就是所需的<code>Link Key</code>。<br>可以通过<code>Microsoft Word</code>的大小写功能转化为大写，并通过查找替换删除中间的逗号得到大写的<code>Link Key</code>：<code>44AC4AE9B640D4EE04E34627088A31A3</code></p><p><img src="/img/2023-12-24/EditMac.png"></p><p><img src="/img/2023-12-24/EditMac2.png"></p><p>可以先保存到一个文档里备用。<br>5. 进入<code>Steam OS</code>修改<code>Link Key</code><br>重启Steam Deck切换到<code>Steam OS</code>，进入桌面模式后运行终端<code>Konsole</code>，进入管理员身份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">su<br></code></pre></td></tr></table></figure><p>输入登录密码后，进入蓝牙设置的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/lib/bluetooth<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>这里的蓝牙地址是以<code>:</code>隔开的大写格式，找到Steam Deck的蓝牙地址<code>14:D4:24:0A:E8:80</code>进入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 14\:D4\:24\:0A\:E8\:80/<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>找到对应蓝牙键盘设备的文件夹名字<code>90:7F:61:91:74:64</code>并进入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> 90\:7F\:61\:91\:74\:64/<br><span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p><img src="/img/2023-12-24/KonsoleBluetooth.png"></p><p>通过<code>nano</code>编辑<code>info</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano info<br></code></pre></td></tr></table></figure><p>修改<code>[LinkKey]</code>下<code>Key=</code>后的值，替换成提取的<code>44AC4AE9B640D4EE04E34627088A31A3</code>：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[LinkKey]</span><br><span class="hljs-attr">Key</span>=<span class="hljs-number">44</span>AC4AE9B640D4EE04E34627088A31A3<br></code></pre></td></tr></table></figure><p><img src="/img/2023-12-24/nanoKey.png"></p><p>在键盘上按<code>CTRL</code>+<code>X</code>退出，按键盘的<code>Y</code>确认保存<br>5. 重启系统<br>重启进入<code>Steam OS</code>，此时蓝牙键盘应该可以自动连接上了，再切换到<code>Windows 10</code>也同样可以不重新配对进行连接。该方法应该对其他的蓝牙设备比如蓝牙鼠标，XBOX手柄等也适用。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://console.systems/2014/09/how-to-pair-low-energy-le-bluetooth.html">How to pair a Low Energy (LE) Bluetooth device in dual boot with Windows &amp; Linux</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Linux</tag>
      
      <tag>Steam Deck</tag>
      
      <tag>Bluetooth</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Steam Deck安装Steam OS,Windows 10双系统</title>
    <link href="/2023/12/23/303337505f15/"/>
    <url>/2023/12/23/303337505f15/</url>
    
    <content type="html"><![CDATA[<h1 id="需求概述"><a href="#需求概述" class="headerlink" title="需求概述"></a>需求概述</h1><p>最近有在Steam Deck上安装<code>Windows 10</code>的需求，但是想保留原来的<code>Steam OS</code>实现双系统。部署过程中最麻烦的还是因为<code>Windows</code>每次启动会修改默认启动项，使得无法保持默认是<code>Steam OS</code>，而尝试在<code>Steam OS</code>的桌面下设置<code>efibootmgr</code>没用。一番搜索后，最终通过大神修改的<a href="https://github.com/jlobue10/SteamDeck_rEFInd"><code>rEFInd</code></a>和默认<code>PowerShell</code>脚本来实现了双系统自由选择。</p><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><ol><li>Steam Deck（最好内存是<code>256G</code>以上版本）</li><li><code>8G</code>以上的U盘<code>*2</code></li><li><code>USB-C</code>拓展坞（可选）</li><li>另一台Windows电脑（用于部署<code>Windows 10</code>安装U盘）</li></ol><h2 id="安装Windows-10"><a href="#安装Windows-10" class="headerlink" title="安装Windows 10"></a>安装<code>Windows 10</code></h2><ol><li>内置硬盘分区<br>需要通过<a href="https://help.steampowered.com/en/faqs/view/1B71-EDF2-EB6D-2BB3">Steam官方教程</a>制作好一个<code>Steam OS</code>的恢复启动U盘。</li></ol><p>制作完成后在Steam Deck关机状态下插入恢复U盘，按住音量减<code>-</code>的情况下按开机键，听到提示音后松开按键即可进入快速启动菜单，选择<code>EFI USB Device</code>即可进入恢复系统。<br>通过开始菜单搜索<code>KDE Partition Manager</code>并打开，接着对默认nvme硬盘Label为<code>home</code>分区进行<code>Resize</code>操作。向左拖拽右侧的边界到合适的大小，即可压缩出一个空白分区（推荐<code>100G</code>以上，不需要格式化），确认后在主界面点击<code>Apply</code>执行。</p><p><img src="/img/2023-12-23/KDEpartition.png"></p><ol start="2"><li>安装<code>Windows 10</code><br>在另一台<code>Windows</code>的电脑上访问<a href="https://www.microsoft.com/en-au/software-download/windows10ISO">微软官网</a>下载<code>Windows 10</code>的<code>ISO</code>镜像。</li></ol><p><img src="/img/2023-12-23/Win10Download.png"></p><p>通过<a href="https://github.com/pbatard/rufus/releases/download/v4.3/rufus-4.3.exe">rufus工具</a>制作启动U盘（选择<code>ISO</code>文件的路径按默认的设置制作即可）。</p><p><img src="/img/2023-12-23/rufus.png"></p><p>在Steam Deck关机状态下按住音量减<code>-</code>的情况下按开机键，听到提示音后松开按键即可进入快速启动菜单，选择<code>EFI USB Device</code>即可进入熟悉的<code>Windows 10</code>安装界面，不过Steam Deck屏幕显示是竖着的，可以直接通过触摸屏幕来进行安装步骤。安装的时候选择安装位置为新创建的未格式化分区即可。<br>3. 安装驱动<br>通过<a href="https://help.steampowered.com/en/faqs/view/6121-ECCD-D643-BAA8">Steam官方Windows资源页</a>下载并根据教程安装对应的APU,声卡，蓝牙，无线网卡等驱动。</p><p><img src="/img/2023-12-23/DeckDrivers.png"></p><h2 id="设置双系统启动项"><a href="#设置双系统启动项" class="headerlink" title="设置双系统启动项"></a>设置双系统启动项</h2><ol><li>安装<code>SteamDeck_rEFInd</code><br>在桌面模式下，打开<code>Konsle</code>应用，运行下面的指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span> &amp;&amp; <span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$HOME</span>/SteamDeck_rEFInd/ &amp;&amp; git <span class="hljs-built_in">clone</span> https://github.com/jlobue10/SteamDeck_rEFInd &amp;&amp; <span class="hljs-built_in">cd</span> SteamDeck_rEFInd &amp;&amp; <span class="hljs-built_in">chmod</span> +x install-GUI.sh &amp;&amp; ./install-GUI.sh<br></code></pre></td></tr></table></figure><code>root</code>用户密码一般为Steam Deck的登录密码。</li><li>设置<code>SteamDeck_rEFInd</code><br>安装完成后桌面会出现<code>SteamDeck_rEFInd</code>的快捷方式，双击打开。</li></ol><p><img src="/img/2023-12-23/rEFIndSetup.png"></p><p>进行美化设置（这里搜集了几个个人喜欢的样式），该工具自带的图片位置：<code>~/SteamDeck_rEFInd/backgrounds</code>和<code>~/SteamDeck_rEFInd/backgrounds</code>。<br>(1) 动界面背景<code>Background</code>：</p><p><img src="/img/2023-12-23/steam-deck-wallpaper.png"></p><p>(2) <code>Steam OS</code>的图标<code>Boot Option #1 Icon</code>：<br><a href="/img/2023-12-23/steam-deck-logo.png">Steam Deck Logo下载</a></p><p>(3) <code>Windows 10</code>的图标<code>Boot Option #2 Icon</code>：<br><a href="/img/2023-12-23/windows-logo.png">Windows Logo下载</a></p><p>设置好后还可以设置倒计时（默认是<code>5</code>秒等参数）。设置好后依次点击底部<code>Install rEFInd</code>，<code>Create Config</code>，<code>Install Config</code>按钮即可完成配置，安装过程中会要求输入Steam Deck的登录密码。<br>3. 设置<code>Windows 10</code>的启动脚本<br>重启后可以通过方向键或右触摸板选择<code>Windows 10</code>的图标，按<code>A</code>确认进入。进入<code>Windows 10</code>后，下载<a href="https://www.mediafire.com/file/w7jswsuctvnnd7k/Dual+Boot+Fix.zip/file"><code>Dual Boot Fix.zip</code></a>并解压。<br>右键以管理员身份运行<code>Setup_rEFInd_Windows_RunAsAdmin.bat</code>即可。除了修复启动项外，该启动脚本也包含了时间同步、花屏修复的功能。</p><h1 id="测试启动项"><a href="#测试启动项" class="headerlink" title="测试启动项"></a>测试启动项</h1><p>重启默认会进入设置好的<code>rEFInd</code>的启动界面，可以通过方向键或右触摸板选择对应的系统，按<code>A</code>确认。</p><p><img src="/img/2023-12-23/Boot.jpeg"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/jlobue10/SteamDeck_rEFInd">GitHub - jlobue10&#x2F;SteamDeck_rEFInd</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.youtube.com/watch?v=ubWPIf2DbvE">YouTube - How To Dual Boot Steam Deck</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://help.steampowered.com/en/faqs/view/1B71-EDF2-EB6D-2BB3">Steam Deck Recovery Instructions</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://help.steampowered.com/en/faqs/view/6121-ECCD-D643-BAA8">Steam Deck - Windows Resources</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Linux</tag>
      
      <tag>Steam Deck</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Steam Deck配置中文输入法</title>
    <link href="/2023/12/23/21ac454a209d/"/>
    <url>/2023/12/23/21ac454a209d/</url>
    
    <content type="html"><![CDATA[<h1 id="需求概述"><a href="#需求概述" class="headerlink" title="需求概述"></a>需求概述</h1><p>在Steam Deck的<code>Arch Linux</code>无法默认输入中文，很不方便，通过安装<code>fcitx</code>可以添加中文拼音输入法。</p><h1 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h1><ol><li>关闭系统只读属性<br>在桌面模式下，打开<code>Konsle</code>应用，运行下面的指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo steamos-readonly <span class="hljs-built_in">disable</span> <br></code></pre></td></tr></table></figure><code>root</code>用户密码一般为Steam Deck的登录密码。</li><li>通过<code>Packman</code>安装<code>fcitx</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -Sy fcitx5-im fcitx5-chinese-addons fcitx5-configtool<br></code></pre></td></tr></table></figure>默认按<code>Y</code>执行安装。</li><li>添加输入法开机启动<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/environment<br></code></pre></td></tr></table></figure>打开的窗口到最后一行添加：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">GTK_IM_MODULE</span>=fcitx<br><span class="hljs-attr">QT_IM_MODULE</span>=fcitx<br><span class="hljs-attr">XMODIFIERS</span>=@im=fcitx<br></code></pre></td></tr></table></figure></li><li>配置输入法设置<br>点击开始，先注销当前账户（<code>log out</code>）再重新登录进桌面模式。</li></ol><p>会看到右下角出现了键盘图标</p><p><img src="/../img/2023-12-23/Keyboard.png"></p><p>打开<code>System Settings</code>-<code>Regional Settings</code>-<code>Input Method</code>，点击<code>Add Input Method</code>，搜索<code>pinyin</code></p><p><img src="/../img/2023-12-23/AddInput.png"></p><p>5.(可选)安装中文字体<br>如果中文字体显示不正常，可以在终端通过<code>Pacman</code>安装字体：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo pacman -S adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts noto-fonts-cjk wqy-microhei wqy-microhei-lite wqy-bitmapfont wqy-zenhei ttf-arphic-ukai ttf-arphic-uming<br></code></pre></td></tr></table></figure><h1 id="测试输入法"><a href="#测试输入法" class="headerlink" title="测试输入法"></a>测试输入法</h1><p>可以通过<code>ctrl</code>+<code>space</code>来切换输入法，输入测试：</p><p><img src="/../img/2023-12-23/InputTest.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.youtube.com/watch?v=HYYeih-rF1g">How to Enable Chinese (中文) IME on Arch Linux&#x2F;Steam Deck</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Steam Deck</tag>
      
      <tag>Chinese</tag>
      
      <tag>Input</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决华为路由器中继方式始终为2.4G的问题</title>
    <link href="/2022/12/11/963d5bc648e5/"/>
    <url>/2022/12/11/963d5bc648e5/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近房东升级了新的光纤套餐，虽然光纤是<code>1Gbps</code>的，但是所配的路由器性能一般（型号：<code>AirTies 9260R</code>），信号非常不稳定，多重因素致使我房间里（与主路由器隔了一个房间三堵墙）的网络速度、信号、稳定性感人：</p><ol><li>5GHz频段能达到<code>100Mbps</code>，但是信号太弱，经常掉线连到2.4G。</li><li>掉到2.4GHz速度居然只有<code>2Mbps</code>，不能忍，49年入国军之感。</li><li>由于是房东Wi-Fi的是双频合一的名称<code>SSID</code>，我的设备无法固定选择某个频率，因此很不稳定。</li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>我掏出了闲置的<code>华为荣耀路由Pro 2</code>，使用默认的中继模式，虽然信号满格但是网速也是奇慢，查看中继模式是2.4GHz。<br>但是华为这个后台管理（默认是<a href="192.168.3.1">192.168.3.1</a>）并没有选择中继频段固定为5GHz的选项，如果能把5GHz信号作为输入，那么信号稳定性和信号强度将会大大提高！</p><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p>华为默认的后台管理没有中继选择频率的选项，那么能否刷第三方路由器固件来获得呢？<br>搜索了下发现荣耀路基本没有路子刷机，遂放弃。</p><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p>屏蔽掉<code>2.4GHz</code>信号，让荣耀路由只能中继<code>5GHz</code>。</p><ol><li>第一种方法是关闭路由器的<code>2.4GHz</code>波段或将<code>2.4GHz</code>波段单独设置一个<code>SSID</code>。<br>虽然能进入主路由器的后台，由于是房东的路由器，这样会导致房内其他人的设备失去2.4GHz连接，所以就执行。</li><li>第二种方法就是直接在主路由<code>2.4GHz</code>网卡下的网络安全过滤设置（<code>MAC Filter</code>）里屏蔽掉我的荣耀路由的网卡地址（<code>MAC</code>），所以中继路由器配置的时候就只能连<code>5Ghz</code>了。<br><img src="/../img/2022-12-11/AirTiesFilter.png"><div class="note note-success">            <p>注意：荣耀路由中继连接到主路由器的<code>MAC</code>地址不是其路由器底部的<code>MAC</code>，具体还是查一下主路由的设置界面，我这边是最后三位不一致。<br>PS：这个思路深受对Mac OS设置5GHz优先的几个方案(<a href="https://zhuanlan.zhihu.com/p/550489117)%E6%89%80%E5%90%AF%E5%8F%91%E3%80%82">https://zhuanlan.zhihu.com/p/550489117)所启发。</a></p>          </div></li><li>第三种方法是配置中继的时候先将路由器尽可能靠近母路由器，这是我发现更加直接的方法（最近房东换了个路由器，前面的方案失效了），不需要更改母路由的设置。</li></ol><h1 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h1><p>成功用<code>5GHz</code>中继后，最后不断地用SpeedTest优化中继路由器的位置，达到最好的信号是下行速度<code>70Mbps</code>（下载速度<code>14MB/s</code>)，而且很稳定，基本够用了。<br><img src="/../img/2022-12-11/status.png"><br><img src="/../img/2022-12-11/speed.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/550489117">双频合一wifi(2.4G&#x2F;5G) 如何让mac 或windows优先选择5G？ 解法思路及最终解 smart connect - 知乎 (zhihu.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://www.v2ex.com/t/476948">如何强制（或优先）让 macOS 处于 5G Wi-Fi 连接？ - V2EX</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://sysin.org/blog/macos-force-connect-5ghz-wifi/">Mac 如何强制使用 5G 频段 Wi-Fi - sysin | SYStem INside | 数据中心系统内幕</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Wi-Fi</tag>
      
      <tag>Router</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用one-key-hidpi开启Mac外接中低分辨率屏幕HiDPI选项</title>
    <link href="/2022/10/21/855fa6316cdb/"/>
    <url>/2022/10/21/855fa6316cdb/</url>
    
    <content type="html"><![CDATA[<h1 id="需求概述"><a href="#需求概述" class="headerlink" title="需求概述"></a>需求概述</h1><p>最近想连接一块小屏幕一边放视频，一边记笔记。于是掏出来了之前买来打游戏的<code>14-inch 1080p</code>分辨率的便携扩展屏和在<code>Mac</code>连接。发现对于这块低分辨率的屏幕，<code>Mac</code>默认的调节选项要么默认分辨率字号太小，要么就是调低分辨率字体模糊。在网上找了个<a href="">one-key-hidpi</a>的脚本开启<code>HiDPI</code>解决了这个问题，屏幕显示字体合适也清晰了。</p><h2 id="14-inch-1080p-默认分辨率"><a href="#14-inch-1080p-默认分辨率" class="headerlink" title="14-inch 1080p 默认分辨率"></a>14-inch 1080p 默认分辨率</h2><p>字体很小</p><p><img src="/../img/2022-10-21/Before.png"></p><h2 id="14-inch-1080p-HiDPI分辨率"><a href="#14-inch-1080p-HiDPI分辨率" class="headerlink" title="14-inch 1080p HiDPI分辨率"></a>14-inch 1080p HiDPI分辨率</h2><p>字体正常清晰</p><p><img src="/../img/2022-10-21/After.png"></p><h1 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h1><ol><li>打开<code>Terminal</code>终端，将终端的窗口移到需要调整的屏幕里，运行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/xzhih/one-key-hidpi/master/hidpi.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure></li><li>选择<code>(1) Enable HiDPI</code>，键盘输入数字<code>1</code>。</li></ol><p><img src="/../img/2022-10-21/S1.png"></p><ol start="3"><li>选择想要的图标，例如输入数字<code>4</code>，选择<code>(4) LG Display</code>作为经过注入<code>EDID</code>后的图标。</li></ol><p><img src="/../img/2022-10-21/S2.png"></p><ol start="4"><li>输入管理员密码，确认。<br>选择对应屏幕分辨率，输入数字<code>2</code>, 选择<code>(2) 1920x1080 Display (use 1424x802, fix underscaled after sleep)</code>。</li></ol><p><img src="/../img/2022-10-21/S3.png"></p><ol start="5"><li>最后重启，调整分辨率即可。</li></ol><p><img src="/../img/2022-10-21/Scale.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/xzhih/one-key-hidpi/blob/master/README-zh.md">一键开启 macOS HiDPI</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>HiDPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Office激活失败出现TPM错误（800090016）</title>
    <link href="/2022/10/16/bfc59215d7b0/"/>
    <url>/2022/10/16/bfc59215d7b0/</url>
    
    <content type="html"><![CDATA[<h1 id="错误出现"><a href="#错误出现" class="headerlink" title="错误出现"></a>错误出现</h1><p>把旧电脑硬盘直接安装到新的主板上，想不重装系统保持原有的软件和文件，结果发现第一次登录时 <code>Windows 10</code>的PIN失效了，需要重新登录账户重制密码。进入系统后，<code>Windows 10</code>是激活的，但是<code>Office 365</code>无法登录激活，用包含许可证的账户登录，不会激活成功，还是会提示再登录，有时候弹出<code>Your Computer&#39;s Trusted Platform Module has malfunctioned（80090016）</code>。  </p><h1 id="解决日志"><a href="#解决日志" class="headerlink" title="解决日志"></a>解决日志</h1><ol><li>开始时卸载重新安装<code>Office</code>，无效。</li><li>根据微软官方的清除TPM缓存的<a href="https://learn.microsoft.com/en-us/office/troubleshoot/activation/tpm-malfunctioned">操作</a>，登录PIN又需要重置，对<code>Office</code>激活还是无效。</li><li>也尝试了删除账户登录信息的NGC文件夹（<code>C:\Windows\ServiceProfiles\LocalService\AppData\Local\Microsoft\NGC</code>），无效</li><li>最后尝试删除AAD.BrokerPlugin文件夹才解决</li></ol><h1 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h1><h2 id="删除AAD-BrokerPlugin文件夹"><a href="#删除AAD-BrokerPlugin文件夹" class="headerlink" title="删除AAD.BrokerPlugin文件夹"></a>删除AAD.BrokerPlugin文件夹</h2><p>在资源管理器输入<code>C:\Users\%username%\AppData\Local\Packages</code>，找到<code>Microsoft.AAD.BrokerPlugin_cw5n1h2txyewy</code>文件夹。</p><p><img src="/../img/2022-10-16/BrokerPlugin.png"></p><h2 id="更改目标文件夹权限"><a href="#更改目标文件夹权限" class="headerlink" title="更改目标文件夹权限"></a>更改目标文件夹权限</h2><p>因为权限问题，无法直接删除文件夹，需要更改文件夹所有权，才能删除。</p><ol><li>右键文件夹<code>属性Properties</code>，<code>安全Security</code>选项卡，点击<code>高级 Advanced</code></li></ol><p><img src="/../img/2022-10-16/Advanced.png"></p><ol start="2"><li>更改文件夹所有者<br>点击<code>更改Change</code>，在<code>Check Names</code>左边输入<code>Everyone</code>，点击<code>OK</code>确认</li></ol><p><img src="/../img/2022-10-16/Owner.png"></p><p><img src="/../img/2022-10-16/Everyone.png"></p><p>再勾选<code>Replace onwer in subcontainers and objects. 替换所有子文件夹的所有者</code>，并确认</p><p><img src="/../img/2022-10-16/Replace.png"></p><ol start="3"><li>更改<code>Everyone</code>用户的权限</li></ol><p><img src="/../img/2022-10-16/Permission.png"></p><p>在组和用户下新增<code>Everyone</code>，勾选<code>完全控制Full Control</code>。<br>4. 尝试删除<code>AAD.BrokerPlugin</code>文件夹<br>在关闭Office的情况下删除该文件夹，如果出现需要管理员，请允许。</p><h2 id="重启Office，并登录"><a href="#重启Office，并登录" class="headerlink" title="重启Office，并登录"></a>重启Office，并登录</h2><p>基本上删掉上述文件夹后，<code>TPM</code>的bug就不会出现了，可以重新登录拥有许可证的账户完成激活。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://learn.microsoft.com/en-us/office/troubleshoot/activation/tpm-malfunctioned">Microsoft 365 Apps activation error Trusted Platform Module malfunctioned - Office | Microsoft Learn</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://windowsreport.com/error-code-80090016-office-365/">4 Tips to Fix Error Code 80090016 on Office 365 [Windows 11] (windowsreport.com)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Office</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LaTex插入图片和参考文献</title>
    <link href="/2022/10/08/171a298ca387/"/>
    <url>/2022/10/08/171a298ca387/</url>
    
    <content type="html"><![CDATA[<h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><h2 id="加载图片功能"><a href="#加载图片功能" class="headerlink" title="加载图片功能"></a>加载图片功能</h2><p><code>LaTex</code>本身不支持图片，所以在文档序言加入</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\usepackage</span>&#123;graphicx&#125;<br></code></pre></td></tr></table></figure><h2 id="插入图片方法"><a href="#插入图片方法" class="headerlink" title="插入图片方法"></a>插入图片方法</h2><p>下面是一个例子说明如何具体插入一张图片，图片需要存放到文档目录下的<code>imgaes</code>文件夹中：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>&#123;article&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;graphicx&#125;<br><span class="hljs-keyword">\graphicspath</span>&#123; &#123;./images/&#125; &#125;<br><br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br>The universe is immense and it seems to be homogeneous, <br>in a large scale, everywhere we look at.<br><br><span class="hljs-keyword">\includegraphics</span>&#123;universe&#125;<br><br>There&#x27;s a picture of a galaxy above<br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/2022-10-08/InsertingImagesEx1.png"></p><h1 id="插入参考文献"><a href="#插入参考文献" class="headerlink" title="插入参考文献"></a>插入参考文献</h1><h2 id="创建文献文本"><a href="#创建文献文本" class="headerlink" title="创建文献文本"></a>创建文献文本</h2><p>在文档目录创建<code>ref.bib</code>文本文件</p><h2 id="复制BibTex文献"><a href="#复制BibTex文献" class="headerlink" title="复制BibTex文献"></a>复制BibTex文献</h2><p>将所用到的文献导出成<code>BibTex</code>文本的格式，<a href="https://www.thecvf.com/">CVF</a>、<a href="https://scholar.google.com/">Google Scholar</a>、<a href="https://arxiv.org/">arxiv</a>、<a href="https://ieeexplore.ieee.org/">IEEE</a>等地方都会有导出选项，将内容复制到<code>ref.bib</code>中保存。</p><p><img src="/../img/2022-10-08/bib1.png"></p><p><img src="/../img/2022-10-08/bib2.png"></p><p><img src="/../img/2022-10-08/bib3.png"></p><p><img src="/../img/2022-10-08/bib4.png"></p><p>以引用<a href="https://ieeexplore.ieee.org/abstract/document/9156471/">Unsupervised Learning for Intrinsic Image Decomposition From a Single Image</a>为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bibtex">@INPROCEEDINGS&#123;9156471,<br>  author=&#123;Liu, Yunfei and Li, Yu and You, Shaodi and Lu, Feng&#125;,<br>  booktitle=&#123;2020 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)&#125;, <br>  title=&#123;Unsupervised Learning for Intrinsic Image Decomposition From a Single Image&#125;, <br>  year=&#123;2020&#125;,<br>  volume=&#123;&#125;,<br>  number=&#123;&#125;,<br>  pages=&#123;3245-3254&#125;,<br>  doi=&#123;10.1109/CVPR42600.2020.00331&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="文档中引用"><a href="#文档中引用" class="headerlink" title="文档中引用"></a>文档中引用</h2><div class="note note-success">            <ul><li>BibTex文本格式<br><code>inproceeding</code>：参考文献的格式，除此之外还有article、book等格式，一般论文只用到article和inrpoceeding<br><code>9156471</code>：默认的文件名，为了插入引用方便，可改成自己喜欢的名字</li></ul>          </div><p>在文末插入reference的起始地方添加两条语句：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\bibliographystyle</span>&#123;IEEEtran&#125; <span class="hljs-comment">%对应引用风格</span><br><span class="hljs-keyword">\bibliography</span>&#123;ref&#125; <span class="hljs-comment">%对应ref.bib文件</span><br></code></pre></td></tr></table></figure><p>在文中需要加参考的文本后插入即可：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\cite</span>&#123;9156471&#125; <span class="hljs-comment">%对应文献，9156471</span><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.overleaf.com/learn/latex/Inserting_Images">Inserting Images - Overleaf.com</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/xovee/article/details/108660814">在 LaTeX 中插入图片 - Xovee的博客 - CSDN</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/114733612">Latex参考文献管理：Bibtex教程</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LaTex</tag>
      
      <tag>BibTex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优化SQL Devloper的界面显示大小</title>
    <link href="/2022/10/02/8551202d6c07/"/>
    <url>/2022/10/02/8551202d6c07/</url>
    
    <content type="html"><![CDATA[<h1 id="需求概述"><a href="#需求概述" class="headerlink" title="需求概述"></a>需求概述</h1><p>在<code>Windows 10</code>笔记本的<code>14-inch 1080p</code>分辨率下发现<code>SQL Developer</code>的字体和界面都会发虚，而在<code>Windows 11</code>台式机的<code>27-inch 4k</code>分辨率下字体特别小，于是准备搞定下这个UI界面的问题。两个平台在Windows系统分辨率设置的缩放都是<code>150%</code>。</p><h2 id="Windows-10-14-inch-1080p-默认界面"><a href="#Windows-10-14-inch-1080p-默认界面" class="headerlink" title="Windows 10 (14-inch 1080p) 默认界面"></a>Windows 10 (14-inch 1080p) 默认界面</h2><p>字体和右侧界面发虚</p><p><img src="/../img/2022-10-02/Win10_default.png"></p><h2 id="Windows-11-27-inch-4k-默认界面"><a href="#Windows-11-27-inch-4k-默认界面" class="headerlink" title="Windows 11 (27-inch 4k) 默认界面"></a>Windows 11 (27-inch 4k) 默认界面</h2><p>字体偏小且界面发虚</p><p><img src="/../img/2022-10-02/Win11_default.png"></p><h1 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h1><h2 id="更改兼容设置"><a href="#更改兼容设置" class="headerlink" title="更改兼容设置"></a>更改兼容设置</h2><ol><li>打开<code>SQL Developer</code>的文件夹，右键<code>sqldeveloper.exe</code>，选择<code>属性</code></li><li>点击<code>兼容性</code>选项卡，点击<code>更改高DPI设置</code>按钮</li><li>弹出<code>高DPI设置</code>窗口，勾选最下方<code>高DPI缩放替代</code>下的<code>替代高DPI缩放行为</code>，下拉选项选择<code>应用程序</code>点击<code>确认</code>按钮</li><li>回到前一个属性窗口再点击<code>确认</code>退出</li></ol><p><img src="/../img/2022-10-02/Win10_properties.png"></p><p><img src="/../img/2022-10-02/Win11_properties.png"></p><div class="note note-success">            <p>这里实际上两个平台设置是相同的。</p>          </div><h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><p>文件路径：<code>\sqldeveloper\sqldeveloper\bin\sqldeveloper.conf</code></p><h2 id="Windows-10-14-inch-1080p"><a href="#Windows-10-14-inch-1080p" class="headerlink" title="Windows 10 (14-inch 1080p)"></a>Windows 10 (14-inch 1080p)</h2><p>更改后面的<code># Bug 27758406 JAVAFX JFXPANEL USAGE (WELCOME/INSTANCE VIEWER) CONFUSES SWING WINDOW SCALING</code>设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">AddVMOption -Dprism.allowhidpi=true<br></code></pre></td></tr></table></figure><p><img src="/../img/2022-10-02/Win10_config.png"></p><h2 id="Windows-11-27-inch-4k"><a href="#Windows-11-27-inch-4k" class="headerlink" title="Windows 11 (27-inch 4k)"></a>Windows 11 (27-inch 4k)</h2><p>同样更改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">AddVMOption -Dprism.allowhidpi=true<br></code></pre></td></tr></table></figure><p>由于<code>27-inch 4k</code>下默认缩放字体会较小，所以将整个用户界面（UI）缩放值设置为<code>2</code>（只能是整数）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conf">AddVMOption -Dsun.java2d.uiScale=2<br></code></pre></td></tr></table></figure><p><img src="/../img/2022-10-02/Win11_config.png"></p><h1 id="完成效果"><a href="#完成效果" class="headerlink" title="完成效果"></a>完成效果</h1><p>完成配置后，字体大小和对应的屏幕尺寸都能有比较好的匹配，整个界面也不发虚了。  </p><div class="note note-success">            <p>PS: 界面美化有助于提高工作效率。</p>          </div><h2 id="Windows-10-14-inch-1080p-优化界面"><a href="#Windows-10-14-inch-1080p-优化界面" class="headerlink" title="Windows 10 (14-inch 1080p) 优化界面"></a>Windows 10 (14-inch 1080p) 优化界面</h2><p><img src="/../img/2022-10-02/Win10_optimize.png"></p><h2 id="Windows-11-27-inch-4k-优化界面"><a href="#Windows-11-27-inch-4k-优化界面" class="headerlink" title="Windows 11 (27-inch 4k) 优化界面"></a>Windows 11 (27-inch 4k) 优化界面</h2><p><img src="/../img/2022-10-02/Win11_optimize.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://qa.1r1g.com/sf/ask/3683558441/">hidpi linux 上的 sqldeveloper</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_45616545/article/details/104321262?spm=1001.2101.3001.6650.14">SQLdeveloper中修改菜单栏字体大小_weixin_45616545的博客-CSDN博客</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Oracle</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2部署Oracle数据库</title>
    <link href="/2022/10/01/0f9162d0c3fa/"/>
    <url>/2022/10/01/0f9162d0c3fa/</url>
    
    <content type="html"><![CDATA[<h1 id="需求概述"><a href="#需求概述" class="headerlink" title="需求概述"></a>需求概述</h1><p>最近需要学习下SQL数据库编程，但由于公司的<code>Windows 10</code>电脑上没有最高的管理员权限，我无法直接安装Windows版本的Oracle数据库，因此曲线救国：通过下载<code>Oracle Linux</code>在子系统上安装Linux版本的<code>Oracle XE 18c Database</code>。这里记录下安装的过程。</p><p><img src="/../img/2022-10-01/install_limit.png"></p><h1 id="部署WSL2下的Oracle-Linux子系统"><a href="#部署WSL2下的Oracle-Linux子系统" class="headerlink" title="部署WSL2下的Oracle Linux子系统"></a>部署WSL2下的Oracle Linux子系统</h1><h2 id="安装Oracle-Linux"><a href="#安装Oracle-Linux" class="headerlink" title="安装Oracle Linux"></a>安装Oracle Linux</h2><p>打开Microsoft Store，搜索<a href="https://www.microsoft.com/store/productId/9PGKJC9GPP2S">Oracle Linux</a>安装，我安装的是教新的<code>Oracle Linux 8.6</code>版本。  </p><p><img src="/../img/2022-10-01/oracle_linux_store.png"></p><h2 id="初始化Oracle-Linux"><a href="#初始化Oracle-Linux" class="headerlink" title="初始化Oracle Linux"></a>初始化Oracle Linux</h2><p>在Windows开始菜单打开<code>Oracle Linux</code>，等待片刻弹出窗口提示设定用户名和密码，注意密码长度必须大于8位，输入后按<code>enter</code>即可</p><h2 id="在本机Windows下通过VSCode连接WSL2下的Oracle-Linux"><a href="#在本机Windows下通过VSCode连接WSL2下的Oracle-Linux" class="headerlink" title="在本机Windows下通过VSCode连接WSL2下的Oracle Linux"></a>在本机Windows下通过VSCode连接WSL2下的Oracle Linux</h2><p>只需要下载Microsoft提供的<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">WSL Extension插件</a>即可自动识别本机的WSL2子系统进行连接。</p><div class="note note-success">            <p>对于<code>Oracle Linux 8.6</code>，没有自带<code>tar</code>工具，因此<code>VSCode</code>连接过程可能会报错。需要打开开始菜单的<code>Oracle Linux 8.6</code>手动安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install tar<br></code></pre></td></tr></table></figure>          </div><h2 id="设置文件交互"><a href="#设置文件交互" class="headerlink" title="设置文件交互"></a>设置文件交互</h2><p>在<code>Windows 10</code>中似乎不会自动在<code>文件资源管理器</code>的<code>网络</code>下出现WSL2的文件系统，需要按<code>win+R</code>在<code>运行</code>里输入以下指令打开：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">\\wsl<span class="hljs-variable">$</span><br></code></pre></td></tr></table></figure><p>子系统文件会出现在<code>网络\wsl$\oracle_linux_8.6</code>下。也可直接在<code>VSCode</code>里进行文件的操作。</p><h1 id="安装Oracle-Database-XE-18c"><a href="#安装Oracle-Database-XE-18c" class="headerlink" title="安装Oracle Database XE 18c"></a>安装Oracle Database XE 18c</h1><h2 id="打开root权限"><a href="#打开root权限" class="headerlink" title="打开root权限"></a>打开root权限</h2><p>打开或用<code>VSCode</code>连接上<code>Oracle Linux 8.6</code>，在终端使用root权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su -s<br></code></pre></td></tr></table></figure><h2 id="下载安装文件"><a href="#下载安装文件" class="headerlink" title="下载安装文件"></a>下载安装文件</h2><p>在浏览器中打开<a href="https://www.oracle.com/database/technologies/xe18c-downloads.html">Oracle Database Express Edition (XE) 18c Downloads</a>，下载<code>oracle-database-18c</code>安装文件：<br><code>oracle-database-xe-18c-1.0-1.x86_64.rpm</code>，并保存在<code>Oracle Linux 8.6</code>的用户文件夹内，路径为<code>/home/name/</code>或<code>~/</code>。<br>接着下载<code>oracle-database-preinstall-18c</code>文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -o oracle-database-preinstall-18c-1.0-1.el6.x86_64.rpm https://yum.oracle.com/repo/OracleLinux/OL6/latest/x86_64/getPackage/oracle-database-preinstall-18c-1.0-1.el6.x86_64.rpm<br></code></pre></td></tr></table></figure><h2 id="进入安装步骤"><a href="#进入安装步骤" class="headerlink" title="进入安装步骤"></a>进入安装步骤</h2><p><a href="https://docs.oracle.com/en/database/oracle/oracle-database/18/xeinl/procedure-installing-oracle-database-xe.html">Oracle官方安装指南</a>是直接安装<code>oracle-database-preinstall-18c</code>： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y localinstall oracle-database-preinstall-18c-1.0-1.el6.x86_64.rpm<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>由于<code>Oracle Linux 8.6</code>缺少很多软件包和库，运行这一步的时候会出现下面的error，提示缺少<code>compat-libcap1</code>和<code>compat-libstdc++-33</code></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">Error: </span><br><span class="hljs-keyword"> </span>Problem: conflicting requests <br>  - nothing provides compat-libcap1 needed by oracle-database-preinstall<span class="hljs-string">-18</span>c<span class="hljs-string">-1</span>.0<span class="hljs-string">-1</span>.el6.x86_64 <br>  - nothing provides compat-libstdc++<span class="hljs-string">-33</span> needed by oracle-database-preinstall<span class="hljs-string">-18</span>c<span class="hljs-string">-1</span>.0<span class="hljs-string">-1</span>.el6.x86_64 <br></code></pre></td></tr></table></figure>          </div><p>需要安装相关的库，依次运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">dnf install -y http://mirror.centos.org/centos/7/os/x86_64/Packages/compat-libcap1-1.10-7.el7.x86_64.rpm<br>dnf install -y http://mirror.centos.org/centos/7/os/x86_64/Packages/compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm<br>dnf install -y http://mirror.centos.org/centos/7/os/x86_64/Packages/glibc-2.17-317.el7.x86_64.rpm<br></code></pre></td></tr></table></figure><p>再运行原来安装<code>oracle-database-preinstall-18c</code>的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y localinstall oracle-database-preinstall-18c-1.0-1.el6.x86_64.rpm<br></code></pre></td></tr></table></figure><p>完成后，继续安装<code>oracle-database-xe-18c-1.0-1.x86_64.rpm</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y localinstall oracle-database-xe-18c-1.0-1.x86_64.rpm<br></code></pre></td></tr></table></figure><p>提示<code>Complete!</code>即可进入下一步。</p><p><img src="/../img/2022-10-01/oracle_install.png"></p><h2 id="部署数据库"><a href="#部署数据库" class="headerlink" title="部署数据库"></a>部署数据库</h2><p>同样打开root权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">su -s<br></code></pre></td></tr></table></figure><p>运行数据库服务配置脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/etc/init.d/oracle-xe-18c configure<br></code></pre></td></tr></table></figure><p>接着会提示设置数据库<code>SYS, SYSTEM, PDBADMIN</code>这三个管理用户的密码。确认后等待进度慢慢完成，该步骤大概需要10～20分钟，然后会出现数据库的连接信息，后面连接数据库会用到：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Connect <span class="hljs-built_in">to</span> Oracle Database <span class="hljs-keyword">using</span> <span class="hljs-literal">one</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> connect strings: <br><br>     Pluggable database: :<span class="hljs-number">1539</span>/XEPDB1 <br><br>     Multitenant container database: :<span class="hljs-number">1539</span> <br><br>Use <span class="hljs-keyword">https</span>://localhost:<span class="hljs-number">5500</span>/em <span class="hljs-built_in">to</span> access Oracle Enterprise Manager <span class="hljs-keyword">for</span> Oracle Database XE <br></code></pre></td></tr></table></figure><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>因为需要以内部指令的形式调用<code>SQLPLUS</code>，因此需要设置环境变量。<code>Oracle Database</code>也需要相关的设置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano ​~/.bashrc<br></code></pre></td></tr></table></figure><p>在最后添加这些内容，按<code>ctrl+x</code>然后<code>enter</code>保存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">export ORACLE_SID=XE <br>export NLS_LANG=AMERICAN_AMERICA.AL32UTF8 <br>export ORACLE_HOME=/opt/oracle/product/18c/dbhomeXE <br>export TNS_ADMIN=$ORACLE_HOME/network/admin <br>export ORAENV_ASK=NO <br>export PATH=$ORACLE_HOME/bin:$PATH <br></code></pre></td></tr></table></figure><p>刷新<code>.bashrc</code>配置文件，使环境变量生效:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">. ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="设置数据库服务自动启动"><a href="#设置数据库服务自动启动" class="headerlink" title="设置数据库服务自动启动"></a>设置数据库服务自动启动</h2><p>每次打开<code>Oracle Linux 8.6</code>后，都需要运行下面指令以启动服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /etc/init.d/oracle-xe-18c start​  <br></code></pre></td></tr></table></figure><p>为了方便可以设置随<code>Windows 10</code>开机自启动。创建<code>init.wsl</code>脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nano /etc/init.wsl<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#! /bin/sh </span><br>sudo /etc/init.d/oracle-xe-18c start​<br></code></pre></td></tr></table></figure><p>在Windows 10下，按<code>win+R</code>在<code>运行</code>里输入以下指令打开启动项文件夹：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">​shell:startup​ <br></code></pre></td></tr></table></figure><p>在该文件夹下创建自启动脚本，命名为<code>oracle-start.vps</code>，文本内容如下：</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbs"><span class="hljs-keyword">Set</span> ws = WScript.<span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;WScript.Shell&quot;</span>)         <br><span class="hljs-number">2</span>ws.run <span class="hljs-string">&quot;wsl -d Ubuntu-18.04 -u root /etc/init.wsl&quot;</span> <br></code></pre></td></tr></table></figure><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>可以在<code>Oracle Linux 8.6</code>中运行<code>SQLPLUS</code>连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqlplus sys/syspwd@localhost:1539/XEPDB1 as sysdba<br></code></pre></td></tr></table></figure><p>其中<code>syspwd</code>为部署时候设置的密码，sys用户必须以管理员身份登录所以最后加了<code>as sysdba</code>。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>下载<a href="https://www.oracle.com/database/sqldeveloper/technologies/download/">SQL Developer</a>，并打开</p><ol><li>点击绿色的<code>+</code>按钮</li></ol><p><img src="/../img/2022-10-01/sql_connect.png"></p><ol start="2"><li>添加连接设置并测试保存</li></ol><p><img src="/../img/2022-10-01/sql_connect_info.png"></p><ul><li>Name: <code>sys</code></li><li>Username: <code>sys</code></li><li>Password: <code>syspwd</code></li><li>Role:<code>SYSDBA</code></li><li>Hostname: <code>localhost</code></li><li>Service name: <code>xepdb1</code></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.daimajiaoliu.com/daima/569934661d4cc04">Windows中的WSL2（子系统）开机启动配置</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://docs.oracle.com/en/database/oracle/oracle-database/18/xeinl/installing-oracle-database-xe.html">Installation Guide for Linux x86-64 | 5.1 Installing Oracle Database XE Using RPM Packages</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://docs.oracle.com/en/database/oracle/oracle-database/18/xeinl/starting-and-stopping-oracle-database.html">Starting and Stopping Oracle Database</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://community.oracle.com/tech/apps-infra/discussion/4335851/unable-to-install-compat-libcap1-1-10-in-ol8-2#:~:text=dnf%20install%20%2Dy,el7.x86_64.rpm">unable to install compat-libcap1-1.10 in OL8.2 - oracle-tech</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>WSL</tag>
      
      <tag>Linux</tag>
      
      <tag>Oracle</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小狗钱钱：养成优秀品格的7条准则</title>
    <link href="/2022/09/25/0b57ea964e57/"/>
    <url>/2022/09/25/0b57ea964e57/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近阅读了《小狗钱钱》这本书，它不仅是一本很好的理财书，也教会了读者如何运用理财的思想经营人生，往自己的“人生储蓄罐里”存钱。</p><p><img src="/../img/2022-09-25/dog.jpg"></p><p>书中提到的7个人生准则相信能让很多人受益匪浅：</p><ol><li>友好亲和</li><li>勇于承担</li><li>善待他人</li><li>帮助给予</li><li>感恩之心</li><li>勤学不辍</li><li>值得信赖</li></ol><h1 id="友好亲和"><a href="#友好亲和" class="headerlink" title="友好亲和"></a>友好亲和</h1><ul><li>我有一个强烈的愿望，希望其他人能够向我一样生活美好而幸福。</li><li>我不会伤害任何人。我克制自己，不介入任何争端。</li><li>我谦虚有礼，尊重他人。我并不是永远正确。</li></ul><h1 id="勇于承担"><a href="#勇于承担" class="headerlink" title="勇于承担"></a>勇于承担</h1><ul><li>遇事我能自我抉择。我能自行判断对某种情况应该作何反应。</li><li>我不受不公平之事的影响，而是将注意力集中在我能做的事情、我知道的知识和我拥有的东西之上。</li><li>我把责任推托给别人的同时，也把相应的权利转交给了对方。</li></ul><h1 id="善待他人"><a href="#善待他人" class="headerlink" title="善待他人"></a>善待他人</h1><ul><li>我只称赞他人。如果确实无法称赞他人，那就最好什么都不说。</li><li>我尽量不批评他人。如果不得不批评，也要用非常礼貌和友善的方式。</li><li>我将注意力集中在他人的优点和闪光点上。</li></ul><h1 id="帮助给予"><a href="#帮助给予" class="headerlink" title="帮助给予"></a>帮助给予</h1><ul><li>我祝愿自己遇到过的所有人都能一切顺利。</li><li>我送给某人礼物，因为我想表达自己对他的好感。</li><li>最美好的事情莫过于帮助他人。我总是在想自己能够帮助谁，没有什么比这更令人快乐。</li></ul><h1 id="感恩之心"><a href="#感恩之心" class="headerlink" title="感恩之心"></a>感恩之心</h1><ul><li>我总是心怀感恩，哪怕是对看似寻常的事情。</li><li>即便遇到了困难，我还是会关注值得感激的事物。</li><li>我对身边的人都充满感激之情，并非常享受和他们共度的美好时光。</li></ul><h1 id="勤学不辍"><a href="#勤学不辍" class="headerlink" title="勤学不辍"></a>勤学不辍</h1><ul><li>如果我骄傲自满，那无异于说自己不必再学任何东西了。因此我应该保持谦恭好学的态度。</li><li>我不仅要阅读好的书籍、写成功日记和知识笔记，还要尽可能多地向他人学习。</li><li>我不拿自己和别人比较，而是尽我所能做到最好。</li></ul><h1 id="值得信赖"><a href="#值得信赖" class="headerlink" title="值得信赖"></a>值得信赖</h1><ul><li>我能否成功总是取决于自身培养出的习惯。</li><li>如果我是一个非常自律的人，我就能比那些虽有天赋但却懒惰散漫的人获得更多的成功。</li><li>我总是很守时。我信守对他人作出的承诺。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.amazon.sg/Puppy-Money-set-two-%E5%A5%97%E8%A3%85%E5%85%B12%E5%86%8C/dp/990036449X">小狗钱钱（全2册）</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>生活感悟</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理财</tag>
      
      <tag>幸福</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Pages托管Hexo博客并绑定个人域名</title>
    <link href="/2022/09/21/f7dac548a1e0/"/>
    <url>/2022/09/21/f7dac548a1e0/</url>
    
    <content type="html"><![CDATA[<h1 id="前期历程"><a href="#前期历程" class="headerlink" title="前期历程"></a>前期历程</h1><p>之前这个博客网站是基于中国大陆阿里云服务器搭建的，域名的备案也是前前后后花了很长时间，但是最后阿里云ECS部署的网站在国外的访问速度实在太慢，加载出来要好几秒。<br>刚好这个月一年的ECS服务到期了，就想着重新在新的服务器上托管原来的网页。看来看去开始想着国内访问也方便，就挂在Gitee上，结果等了3～4天的实名认证后才发现个人版用户没法绑定自己申请的域名。<br>最后还是感觉GitHub Pages托管的体验最好，直接可以绑定个人域名，虽然不知道国内访问是否流畅，后续再看看有没有必要进行CDN加速。</p><h1 id="Hexo建站"><a href="#Hexo建站" class="headerlink" title="Hexo建站"></a>Hexo建站</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>MacOS Monterey 12.5.1</p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><ol><li>Git<br>建议通过<a href="https://brew.sh/">Homebrew</a>安装<a href="https://git-scm.com/download/mac">Git</a>和<a href="https://nodejs.org/">Node.js</a><br>若没有Homebrew，可打开Mac自带的bash通过下面指令安装：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure></li><li>安装git：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install git<br></code></pre></td></tr></table></figure></li><li>安装Node.js<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install node<br></code></pre></td></tr></table></figure></li><li>安装Hexo<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li>创建并进入博客文件夹<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Termial">mkdir ~/blog<br>cd ～/blog<br></code></pre></td></tr></table></figure></li><li>开始写你的第一个博客<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Termial">hexo new &#x27;My first blog&#x27;<br></code></pre></td></tr></table></figure>输入指令后会生成一个对应博客名字的Markdown文件，就可以开始写博客了。<br>博客图片保存在<code>~/blog/source/img/</code>下的自定义位置即可。例如：<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">![](<span class="hljs-link">/img/your_image.jpg</span>)<br></code></pre></td></tr></table></figure>具体如何发布博客，可以参考安装完Hexo自带的<code>hello world</code>页面及官方文档。我之前也提供过了一个自动发布博客的<a href="https://cellport.top/2022/09/18/Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8sh%E8%84%9A%E6%9C%AC/">sh脚本</a>。</li></ol><h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p>Hexo支持多种主题，可以在GitHub上搜索想要的主题即可。我用的是还在不断维护更新的Fluid主题</p><ol><li>安装Fluid主题<br>在blog目录下运行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure></li><li>配置主题文件<br>打开Finder进入到用户文件夹下的<code>blog/themes/fluid/</code>文件夹，将主题文件夹里的<code>_config.yml</code>重命名为<code>_config.fluid.yml</code>，移动到<code>～/blog/</code>文件夹下</li><li>修改Hexo配置<br>如下修改 Hexo 博客目录中的 <code>_config.yml</code>：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure></li><li>其他主题外观<br>编辑<code>_config.fluid.yml</code>即可，具体可参考<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">Fluid主题配置指南</a></li></ol><h2 id="其他Hexo配置"><a href="#其他Hexo配置" class="headerlink" title="其他Hexo配置"></a>其他Hexo配置</h2><p>打开<code>_config.yml</code>，根据自己网页内容修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">学习中lc700x</span> <span class="hljs-comment"># 页面左上角博客网页名字</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">lc700x</span> <span class="hljs-comment"># 博客作者</span><br><br><span class="hljs-comment"># URL</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://cellport.top</span> <span class="hljs-comment"># 改为自己的域名</span><br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span> <span class="hljs-comment"># 部署到GitHub Pages对应分支的参数，执行hexo d的时候会部署到对应的仓库</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/lc700x/lc700x.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h1 id="GitHub托管"><a href="#GitHub托管" class="headerlink" title="GitHub托管"></a>GitHub托管</h1><h2 id="注册GitHub账户"><a href="#注册GitHub账户" class="headerlink" title="注册GitHub账户"></a>注册GitHub账户</h2><p>GitHub注册<a href="https://github.com/join">地址</a>，输入相应信息验证邮箱即可。</p><p><img src="/img/2022-09-21/signup.png"></p><h2 id="添加个人博客仓库"><a href="#添加个人博客仓库" class="headerlink" title="添加个人博客仓库"></a>添加个人博客仓库</h2><p>登录GitHub后，点击右上角个人头像旁边的<code>+</code>，点击<code>New repository</code>。</p><p><img src="/img/2022-09-21/add.png"></p><p>弹出页面中，仓库名字<code>yourname.github.io</code>，<code>yourname</code>字段和你的用户名一致，仓库名字将会是默认个人博客的网址。</p><p><img src="/../img/2022-09-21/repository.png"></p><p>其他选项默认即可，注意个人主页必须选择仓库为<code>public</code>属性，点击最下面的绿色按钮创建博客仓库。</p><p><img src="/../img/2022-09-21/create.png"></p><h2 id="从Hexo部署到新仓库"><a href="#从Hexo部署到新仓库" class="headerlink" title="从Hexo部署到新仓库"></a>从Hexo部署到新仓库</h2><ol><li>打开<code>yourname.github.io</code>仓库后，点击右侧<code>code</code>，复制新仓库HTTPS选项下的git地址，用于hexo的部署。  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/yourname/y</span>ourname.github.io.git<br></code></pre></td></tr></table></figure></li></ol><p><img src="/../img/2022-09-21/git.png"></p><p>并复制到Hexo博客目录设置文件<code>_config.yml</code>的<code># Deployment</code>下。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span> <span class="hljs-comment"># 部署到GitHub Pages对应分支的参数，执行hexo d的时候会部署到对应的仓库</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/yourname/yourname.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><ol start="2"><li>git配置用户信息<br>设置好Git对应的用户信息：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置邮箱</span><br>git config --global user.email <span class="hljs-string">&quot;you@example.com&quot;</span><br><span class="hljs-comment"># 设置用户名</span><br>git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br></code></pre></td></tr></table></figure></li><li>在terminal中依次执行下面的指令完成部署：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure></li></ol><h2 id="GitHub-Pages设置"><a href="#GitHub-Pages设置" class="headerlink" title="GitHub Pages设置"></a>GitHub Pages设置</h2><p>点击<code>yourname.github.io</code>仓库页面右边的设置选项<code>Settings</code>，左边侧边栏选择<code>Pages</code>，按照之前的部署设置<code>Source</code>为<code>Deploy from a brantch</code>，分支选择对应<code>master</code>分支。<br>保存设置后检查，<code>Pages</code>是否显示’’Your site is live at <a href="https://yourname.github.io/&#39;&#39;%EF%BC%8C%E5%B9%B6%E5%B0%9D%E8%AF%95%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%AE%BF%E9%97%AE%E3%80%82">https://yourname.github.io/&#39;&#39;，并尝试在浏览器中访问。</a><br>如果没有自己的域名，到此就可以用GitHub的域名开始个人博客网页之旅了。</p><h1 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h1><p>当默认的GitHub域名可以访问后，我们可以进一步选择绑定自己的域名。</p><h2 id="DNS解析设置"><a href="#DNS解析设置" class="headerlink" title="DNS解析设置"></a>DNS解析设置</h2><p>以腾讯云<a href="https://www.dnspod.cn/">DNSPOD</a>为例，绑定个人域名<code>youname.com</code>：</p><ol><li>点击右上角<code>登录控制台</code>，可以直接扫微信二维码登录</li></ol><p><img src="/../img/2022-09-21/dnspod.png"></p><p>注：新用户需要完成实名认证才能使用<br>2. 单击右上角进入<code>管理控制台</code>，选择<code>DNS解析</code></p><p><img src="/../img/2022-09-21/manage.png"></p><p><img src="/../img/2022-09-21/dns.png"></p><p>点击<code>添加域名</code>按钮，输入自己的域名<code>yourname.com</code>，并确认</p><p><img src="/../img/2022-09-21/site.png"></p><ol start="3"><li>点击域名，添加两条cname记录:</li></ol><table><thead><tr><th>主机记录</th><th>记录类型</th><th>记录值</th></tr></thead><tbody><tr><td>@</td><td>CNAME</td><td>yourname.github.io</td></tr><tr><td>www</td><td>CNAME</td><td>yourname.github.io</td></tr></tbody></table><p><img src="/../img/2022-09-21/cname.png"></p><h2 id="域名设置"><a href="#域名设置" class="headerlink" title="域名设置"></a>域名设置</h2><p>打开域名提供商网页，这边以阿里云<a href="https://wanwang.aliyun.com/">万网</a>为例，添加DNSPOD的DNS服务器</p><ol><li>登录控制台，选择<code>域名</code></li></ol><p><img src="/../img/2022-09-21/net.png"></p><p><img src="/../img/2022-09-21/url.png"></p><ol start="2"><li>域名页面往下找到域名信息，点击<code>管理</code></li></ol><p><img src="/../img/2022-09-21/sitedns.png"></p><p>修改或添加腾讯云DNSPOD的DNS地址</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">factory<span class="hljs-selector-class">.dnspod</span><span class="hljs-selector-class">.net</span><br>related<span class="hljs-selector-class">.dnspod</span>.net<br></code></pre></td></tr></table></figure><p><img src="/../img/2022-09-21/changedns.png"></p><p>修改后生效需要一段时间</p><h2 id="Pages设定域名"><a href="#Pages设定域名" class="headerlink" title="Pages设定域名"></a>Pages设定域名</h2><p>回到GitHub页面，在<code>Pages</code>设置<code>Customer Domain</code>，输入<code>yourname.com</code>，保存片刻后可以勾选开启HTTPS，<code>Enforce HTTPS</code>。<br><img src="/../img/2022-09-21/customdomain.png"><br>GitHub Pages采用的是<a href="https://letsencrypt.org/">Let’s Encrypt</a>免费的证书方案，这一步可能需要来回尝试几次才能完成HTTPS证书的部署。<br>到此，一个自定义域名的博客网站就建设好了！</p><h1 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h1><h2 id="每次提交Hexo后CNAME文件消失问题"><a href="#每次提交Hexo后CNAME文件消失问题" class="headerlink" title="每次提交Hexo后CNAME文件消失问题"></a>每次提交Hexo后CNAME文件消失问题</h2><h3 id="后果："><a href="#后果：" class="headerlink" title="后果："></a>后果：</h3><p><code>CNAME</code>文件消失会导致GitHub自定义域名失效，博客页面无法访问。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>建议将GitHub绑定域名生成的<code>CNAME</code>文件下载到本地Hexo博客的<code>source</code>文件夹下，这样每次<code>hexo d</code>同步就不会消失了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/">Hexo文档</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://fluid-dev.github.io/hexo-fluid-docs/start/">开始使用 - Hexo Fluid</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://poplite.xyz/post/2018/05/03/how-to-enable-https-for-custom-domain-on-github-pages.html">Github Pages 开始为自定义域名提供 HTTPS 支持</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">Managing a custom domain for your GitHub Pages site - GitHub Docs</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_30696427/article/details/99023640">Hexo - CNAME文件在每次部署后就没了 - CSDN博客</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_41747528/article/details/102772937">解决 Hexo 部署 Github Pages 自定义域名失效的问题(即使已添加 CNAME）- CSDN博客</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
      <tag>DNS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac终端简单美化和增强方案</title>
    <link href="/2022/09/18/efbfe07ca302/"/>
    <url>/2022/09/18/efbfe07ca302/</url>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>Mac默认的终端界面是白底黑字，非常单调，希望通过美化提高其颜值并突出代码指令的重点。</p><h1 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h1><h2 id="1-安装oh-my-zsh"><a href="#1-安装oh-my-zsh" class="headerlink" title="1. 安装oh my zsh"></a>1. 安装oh my zsh</h2><p>打开Mac的终端<code>Terminal.app</code>，运行下面指令安装<code>oh my zsh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-更改oh-my-zsh相关配置"><a href="#2-更改oh-my-zsh相关配置" class="headerlink" title="2. 更改oh my zsh相关配置"></a>2. 更改<code>oh my zsh</code>相关配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano ~/.zshrc<br></code></pre></td></tr></table></figure><p>修改第11行的主题部分代码，选择主题<code>ys</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ZSH_THEME=<span class="hljs-string">&quot;ys&quot;</span><br></code></pre></td></tr></table></figure><p>（可选：关闭自动更新）<br>修改第27行的更新选新部分代码，取消注释：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">zstyle</span> <span class="hljs-string">&#x27;:omz:update&#x27;</span> mode disabled<br></code></pre></td></tr></table></figure><p><code>ctrl+x</code>保存，<code>y</code>并按<code>return/enter</code>确认退出</p><h2 id="3-加载自定义终端主题更改终端的背景字体颜色"><a href="#3-加载自定义终端主题更改终端的背景字体颜色" class="headerlink" title="3. 加载自定义终端主题更改终端的背景字体颜色"></a>3. 加载自定义终端主题更改终端的背景字体颜色</h2><p>顶部菜单<code>Termninal - Preferences...</code></p><p><img src="/img/2022-09-18/menu.png"></p><p>点击Profiles选项。<br><img src="/img/2022-09-18/profile.png"><br>加载自定义预设<code>Beautify.terminal</code>，并设置为默认。</p><p><img src="/img/2022-09-18/import.png"></p><p><img src="/img/2022-09-18/default.png"></p><p>自定义预设<code>Beautify.terminal</code>下载链接：<a href="https://y81xl-my.sharepoint.com/:f:/g/personal/lc700x_y81xl_onmicrosoft_com/ElYpJcfPyhxPtnOLf1PeCAsBAXj4ADmPQ8IivywO6Y8GTQ?e=yboPd1">OneDrive</a></p><h2 id="4-重启终端"><a href="#4-重启终端" class="headerlink" title="4. 重启终端"></a>4. 重启终端</h2><p>当退出终端重新打开后即可看到新设置好的美化版界面。<br><img src="/img/2022-09-18/window.png"></p><h2 id="5-安装代码自动补全插件"><a href="#5-安装代码自动补全插件" class="headerlink" title="5. 安装代码自动补全插件"></a>5. 安装代码自动补全插件</h2><p>通过git下载zsh-autosuggestions插件到 oh-my-zsh 的插件目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure><p>编辑oh my zsh配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano ~/.zshrc<br></code></pre></td></tr></table></figure><p>在plugins&#x3D;(git) 这行，添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">plugins=(git zsh-autosuggestions)<br></code></pre></td></tr></table></figure><p><img src="/img/2022-09-18/plugin.png"></p><p>重启生效zsh配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://ohmyz.sh/">Oh My Zsh - a delightful &amp; open source framework for Zsh</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/u010391437/article/details/75126310">macOS 修改终端Terminal的颜色设置_米克米不克的博客</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://www.cco.xyz/archives/668">如何关闭oh my zsh更新</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://learnku.com/articles/53859">Mac 配置 oh-my-zsh 和命令行自动补全</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>ZSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客自动sh脚本</title>
    <link href="/2022/09/18/9e680c77e302/"/>
    <url>/2022/09/18/9e680c77e302/</url>
    
    <content type="html"><![CDATA[<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>Hexo搭建博客后，每次写完博客文章，基本需要经过四步：清理，生成，预览，上传</p><ol><li>清楚缓存和静态文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure></li><li>生成网页静态文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure>或者简写为：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g<br></code></pre></td></tr></table></figure></li><li>启动本地服务器<code>localhost</code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo server<br></code></pre></td></tr></table></figure>或者简写为：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo s<br></code></pre></td></tr></table></figure></li><li>上传部署到服务器<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo deploy<br></code></pre></td></tr></table></figure>或者简写为：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo d<br></code></pre></td></tr></table></figure></li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>sh脚本中按顺序执行前3步，第4步是否执行根据第3步的预览本地页面来判断：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># Hexo清理，生成，启用</span><br>hexo clean<br>hexo g<br>hexo s<br><br><span class="hljs-comment"># 询问语句</span><br><span class="hljs-built_in">read</span> -r -p <span class="hljs-string">&quot;Continue to deploy to server? [Y/n] &quot;</span> input<br><span class="hljs-keyword">case</span> <span class="hljs-variable">$input</span> <span class="hljs-keyword">in</span><br>    [yY][eE][sS]|[yY])<br>hexo d<br>;;<br><br>    [nN][oO]|[nN])<br><span class="hljs-built_in">exit</span> 1<br>;;<br><span class="hljs-keyword">esac</span> <span class="hljs-comment">#退出</span><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://hexo.io/zh-cn/docs/commands.html#server">Hexo指令</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://blog.csdn.net/liyyzz33/article/details/93497802">shell脚本–提示确认（Y&#x2F;N，YES&#x2F;NO）å</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>sh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决hexo中Latex报错的问题:expected variable end</title>
    <link href="/2022/08/06/2171b54360f8/"/>
    <url>/2022/08/06/2171b54360f8/</url>
    
    <content type="html"><![CDATA[<h1 id="错误出现"><a href="#错误出现" class="headerlink" title="错误出现"></a>错误出现</h1><p>在提交CS229学习笔记的时候，hexo出现了以下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">err: Error [Nunjucks Error]: _posts/CS229（Machine Learning）学习笔记.md [Line 80, Column 32] expected variable end<br>      =====               Context Dump               =====<br>      === (line number probably different from <span class="hljs-built_in">source</span>) ===<br>    75 | &lt;p&gt;$$&lt;br&gt;<br>    76 | \min_&#123;w_1,w_2,…,b&#125;J(w_1,w_2,…,b)&lt;br&gt;<br>    77 | $$&lt;/p&gt;<br>    78 | &lt;h1&gt;梯度下降 Gradient descent&lt;/h1&gt;<br>    79 | &lt;p&gt;$$&lt;br&gt;<br>    80 | b=b-α&#123;\frac&#123;\partial&#125;&#123;&#123;\partial&#125;b&#125;J(w,b)&#125;<br>    81 | $$<br>    82 |<br>    83 | **Learning Rate:** $α$<br>    84 | **Derivative:** $\frac&#123;\partial&#125;&#123;&#123;\partial&#125;w&#125;J(w,b)$<br>      =====             Context Dump Ends            =====<br>      at formatNunjucksError (F:\blog\node_modules\hexo\lib\extend\tag.js:171:13)<br></code></pre></td></tr></table></figure><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>后来搜索相关资料，需要在公式中重复的大括号<code>&#123;&#123;`或`&#125;&#125;</code>中间添加空格才行。<br>例如：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">b=b-α&#123;<span class="hljs-keyword">\frac</span>&#123;<span class="hljs-keyword">\partial</span>&#125;&#123;&#123;<span class="hljs-keyword">\partial</span>&#125;b&#125;J(w,b)&#125;<br></code></pre></td></tr></table></figure><p>需要更改为</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">b=b-α&#123;<span class="hljs-keyword">\frac</span>&#123;<span class="hljs-keyword">\partial</span>&#125;&#123; &#123;<span class="hljs-keyword">\partial</span>&#125;b&#125;J(w,b)&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>可以在写好博客的Markdown之后用全局替换掉所有的大括号<code>&#123;&#123;`或`&#125;&#125;</code>位<code>&#123; &#123;</code>或<code>&#125; &#125;</code>，再在hexo中提交。</p><p><img src="/img/2022-08-06/hexo_latex.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.dounaite.com/article/62843328ac359fc9133aa9e5.html">Hexo 提交命令时的错误 - 豆奶特 (dounaite.com)</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
      <tag>Latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>json标记文件批量转化黑白mask</title>
    <link href="/2022/08/06/44830959eb60/"/>
    <url>/2022/08/06/44830959eb60/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>环境:</strong> Ubuntu 20.04 LTS下Conda部署的Python 3.10环境<br><strong>软件:</strong> labelme v5.0.1<br><strong>文件</strong> 已有<code>example.png</code>和<code>example.json</code>文件，</p><h1 id="转换效果"><a href="#转换效果" class="headerlink" title="转换效果"></a>转换效果</h1><p>原本labelme自带的json_to_dataset.py只能一次转换出一个文件的黑红遮罩，文件是放在文件夹中，不太方便用于训练（一般是黑白的遮罩）。修改后调用批量脚本可以实现黑白遮罩的批量转换：<br><code>example.json</code>和<code>example.png</code>所在目录下会新建<code>mask</code>文件夹,<code>mask</code>内会生成<code>example_GT.png</code>的黑白遮罩文件。<br>如有多组<code>*.json</code>和<code>*.png</code>则在<code>mask</code>内会生成所有的黑白遮罩文件</p><h2 id="转换后的目录结构"><a href="#转换后的目录结构" class="headerlink" title="转换后的目录结构"></a>转换后的目录结构</h2><ul><li>example&#x2F;  </li><li><ul><li>example.json</li></ul></li><li><ul><li>example.png</li></ul></li><li><ul><li>example1.json</li></ul></li><li><ul><li>example1.png</li></ul></li><li><ul><li>mask&#x2F;</li></ul></li><li><ul><li><ul><li>example_GT.png</li></ul></li></ul></li><li><ul><li><ul><li>example1_GT.png</li></ul></li></ul></li></ul><h1 id="安装labelme-v5-0-1"><a href="#安装labelme-v5-0-1" class="headerlink" title="安装labelme v5.0.1"></a>安装labelme v5.0.1</h1><p>按照官方的Anaconda教程进行</p><h2 id="创建labelme虚拟环境"><a href="#创建labelme虚拟环境" class="headerlink" title="创建labelme虚拟环境"></a>创建labelme虚拟环境</h2><p>conda新建环境，命名为labelme:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create --name=labelme python=3.10<br></code></pre></td></tr></table></figure><p>激活labelme虚拟环境:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate labelme<br></code></pre></td></tr></table></figure><p>使用pip安装labelme：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install labelme<br></code></pre></td></tr></table></figure><h1 id="json文件概览"><a href="#json文件概览" class="headerlink" title="json文件概览"></a>json文件概览</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.5.7&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;flags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;shapes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;abnormal&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//label下面的类别abnormal</span><br>      <span class="hljs-attr">&quot;points&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">[</span><br>          <span class="hljs-number">3.2645502645502518</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">251.32275132275132</span><br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">[</span><br>          <span class="hljs-number">19.62433862433858</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-number">34.6190476190476</span><br>        <span class="hljs-punctuation">]</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;group_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;shape_type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rectangle&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;flags&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;imagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test.png&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//对应png文件</span><br>  <span class="hljs-attr">&quot;imageData&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">//null则需要test.png也在同一个目录</span><br>  <span class="hljs-attr">&quot;imageHeight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">512</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;imageWidth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">512</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>需要注意：<br>1.test.json文件中的<code>&quot;label&quot;:&quot;abnormal&quot;</code>，此处只有一种标记的类别<code>abnormal</code>。某些json也有可能有多种标记。<br>2.如果是<code>&quot;imageData&quot;</code>的值是<code>null</code>，则需要将test.png也放在test.json的相同目录下。</p>          </div><h1 id="修改labelme相关文件"><a href="#修改labelme相关文件" class="headerlink" title="修改labelme相关文件"></a>修改labelme相关文件</h1><h2 id="修改labelme的json-to-dataset-py"><a href="#修改labelme的json-to-dataset-py" class="headerlink" title="修改labelme的json_to_dataset.py"></a>修改labelme的json_to_dataset.py</h2><p>该文件的路径为<code>~/anaconda3/envs/labelme/lib/python3.10/site-packages/labelme/cli/json_to_dataset.py</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/anaconda3/envs/labelme/lib/python3.10/site-packages/labelme/cli/<br><span class="hljs-built_in">cp</span> json_to_dataset.py json_to_dataset.py_backup <span class="hljs-comment">#备份原始的json_to_dataset.py文件</span><br></code></pre></td></tr></table></figure><p>编辑json_to_dataset.py文件，修改以下几处地方：<br>1.将原始代码8行位置的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> PIL.Image<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#import PIL.Image #后面会不用这个功能，所以注释掉</span><br></code></pre></td></tr></table></figure><p><img src="/img/2022-08-06/json_to_dataset_change1.png"></p><p>2.将原代码31行位置的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">out_dir = osp.basename(json_file).replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>)<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">out_dir = osp.basename(json_file).replace(<span class="hljs-string">&quot;.json&quot;</span>, <span class="hljs-string">&quot;_GT&quot;</span>) <span class="hljs-comment">#让临时文件夹与图片名相同并添加`_GT`后缀</span><br></code></pre></td></tr></table></figure><p><img src="/img/2022-08-06/json_to_dataset_change2.png"></p><p>3.将原代码49行位置的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">label_name_to_value = &#123;<span class="hljs-string">&quot;_background_&quot;</span>: <span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">label_name_to_value = &#123;<span class="hljs-string">&quot;_background_&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;abnormal&quot;</span>: <span class="hljs-number">1</span>&#125; <span class="hljs-comment">#添加为对应的abnormal类别</span><br></code></pre></td></tr></table></figure><p><img src="/img/2022-08-06/json_to_dataset_change3.png"></p><p>4.将原代码69-75行位置的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">PIL.Image.fromarray(img).save(osp.join(out_dir, <span class="hljs-string">&quot;img.png&quot;</span>))<br>utils.lblsave(osp.join(out_dir, <span class="hljs-string">&quot;label.png&quot;</span>), lbl)<br>PIL.Image.fromarray(lbl_viz).save(osp.join(out_dir, <span class="hljs-string">&quot;label_viz.png&quot;</span>))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(osp.join(out_dir, <span class="hljs-string">&quot;label_names.txt&quot;</span>), <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> lbl_name <span class="hljs-keyword">in</span> label_names:<br>        f.write(lbl_name + <span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># PIL.Image.fromarray(img).save(osp.join(out_dir, &quot;img.png&quot;)) # 注释掉不需要的文件</span><br>utils.lblsave(osp.join(<span class="hljs-string">&#x27;./mask&#x27;</span>, <span class="hljs-built_in">str</span>(os.path.basename(out_dir))+<span class="hljs-string">&quot;.png&quot;</span>), lbl) <span class="hljs-comment"># 修改输出的文件名为和&quot;图片名_GT.png&quot;和输出路径为mask</span><br><span class="hljs-comment"># PIL.Image.fromarray(lbl_viz).save(osp.join(out_dir, &quot;label_viz.png&quot;))</span><br><br><span class="hljs-comment"># with open(osp.join(out_dir, &quot;label_names.txt&quot;), &quot;w&quot;) as f:</span><br><span class="hljs-comment">#     for lbl_name in label_names:</span><br><span class="hljs-comment">#         f.write(lbl_name + &quot;\n&quot;)</span><br></code></pre></td></tr></table></figure><p><img src="/img/2022-08-06/json_to_dataset_change45.png"></p><p>5.在原代码77行下方位置添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.rmdir(out_dir) <span class="hljs-comment">#删除原本生成的json同名的文件夹</span><br></code></pre></td></tr></table></figure><p>最终修改的的<code>json_to_dataset.py</code>如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> os.path <span class="hljs-keyword">as</span> osp<br><br><span class="hljs-keyword">import</span> imgviz<br><span class="hljs-comment"># import PIL.Image #后面会不用这个功能，所以注释掉</span><br><br><span class="hljs-keyword">from</span> labelme.logger <span class="hljs-keyword">import</span> logger<br><span class="hljs-keyword">from</span> labelme <span class="hljs-keyword">import</span> utils<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    logger.warning(<br>        <span class="hljs-string">&quot;This script is aimed to demonstrate how to convert the &quot;</span><br>        <span class="hljs-string">&quot;JSON file to a single image dataset.&quot;</span><br>    )<br>    logger.warning(<br>        <span class="hljs-string">&quot;It won&#x27;t handle multiple JSON files to generate a &quot;</span><br>        <span class="hljs-string">&quot;real-use dataset.&quot;</span><br>    )<br><br>    parser = argparse.ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&quot;json_file&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&quot;-o&quot;</span>, <span class="hljs-string">&quot;--out&quot;</span>, default=<span class="hljs-literal">None</span>)<br>    args = parser.parse_args()<br><br>    json_file = args.json_file<br><br>    <span class="hljs-keyword">if</span> args.out <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        out_dir = osp.basename(json_file).replace(<span class="hljs-string">&quot;.json&quot;</span>, <span class="hljs-string">&quot;_GT&quot;</span>) <span class="hljs-comment">#让临时文件夹与图片名相同并添加`_GT`后缀</span><br>        out_dir = osp.join(osp.dirname(json_file), out_dir)<br>    <span class="hljs-keyword">else</span>:<br>        out_dir = args.out<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> osp.exists(out_dir):<br>        os.mkdir(out_dir)<br><br>    data = json.load(<span class="hljs-built_in">open</span>(json_file))<br>    imageData = data.get(<span class="hljs-string">&quot;imageData&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> imageData:<br>        imagePath = os.path.join(os.path.dirname(json_file), data[<span class="hljs-string">&quot;imagePath&quot;</span>])<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(imagePath, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            imageData = f.read()<br>            imageData = base64.b64encode(imageData).decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    img = utils.img_b64_to_arr(imageData)<br><br>    label_name_to_value = &#123;<span class="hljs-string">&quot;_background_&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;abnormal&quot;</span>: <span class="hljs-number">1</span>&#125; <span class="hljs-comment">#添加为对应的abnormal类别</span><br>    <span class="hljs-keyword">for</span> shape <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(data[<span class="hljs-string">&quot;shapes&quot;</span>], key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;label&quot;</span>]):<br>        label_name = shape[<span class="hljs-string">&quot;label&quot;</span>]<br>        <span class="hljs-keyword">if</span> label_name <span class="hljs-keyword">in</span> label_name_to_value:<br>            label_value = label_name_to_value[label_name]<br>        <span class="hljs-keyword">else</span>:<br>            label_value = <span class="hljs-built_in">len</span>(label_name_to_value)<br>            label_name_to_value[label_name] = label_value<br>    lbl, _ = utils.shapes_to_label(<br>        img.shape, data[<span class="hljs-string">&quot;shapes&quot;</span>], label_name_to_value<br>    )<br><br>    label_names = [<span class="hljs-literal">None</span>] * (<span class="hljs-built_in">max</span>(label_name_to_value.values()) + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> name, value <span class="hljs-keyword">in</span> label_name_to_value.items():<br>        label_names[value] = name<br><br>    lbl_viz = imgviz.label2rgb(<br>        lbl, imgviz.asgray(img), label_names=label_names, loc=<span class="hljs-string">&quot;rb&quot;</span><br>    )<br><br>    <span class="hljs-comment"># PIL.Image.fromarray(img).save(osp.join(out_dir, &quot;img.png&quot;)) # 注释掉不需要的文件</span><br>    utils.lblsave(osp.join(<span class="hljs-string">&#x27;./mask&#x27;</span>, <span class="hljs-built_in">str</span>(os.path.basename(out_dir))+<span class="hljs-string">&quot;.png&quot;</span>), lbl) <span class="hljs-comment"># 修改输出的文件名为和&quot;图片名_GT.png&quot;和输出路径为mask</span><br>    <span class="hljs-comment"># PIL.Image.fromarray(lbl_viz).save(osp.join(out_dir, &quot;label_viz.png&quot;))</span><br><br>    <span class="hljs-comment"># with open(osp.join(out_dir, &quot;label_names.txt&quot;), &quot;w&quot;) as f:</span><br>    <span class="hljs-comment">#     for lbl_name in label_names:</span><br>    <span class="hljs-comment">#         f.write(lbl_name + &quot;\n&quot;)</span><br>    <br>    logger.info(<span class="hljs-string">&quot;Saved to: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(out_dir))<br>    os.rmdir(out_dir) <span class="hljs-comment">#删除原本生成的json同名的文件夹</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="修改labelme调用的label-py"><a href="#修改labelme调用的label-py" class="headerlink" title="修改labelme调用的label.py"></a>修改labelme调用的label.py</h2><p>新版的labelme和旧版不同，其直接调用imgviz的<code>label.py</code>进行标记。修改该文件可以对标记区域的颜色进行调整，该文件的路径为<code>~/anaconda3/envs/labelme/lib/python3.10/site-packages/imgviz/label.py</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/anaconda3/envs/labelme/lib/python3.10/site-packages/imgviz/<br><span class="hljs-built_in">cp</span> label.py label.py_backup <span class="hljs-comment">#备份原始的label.py文件</span><br></code></pre></td></tr></table></figure><p>编辑label.py文件，在原代码46行下方位置添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><code class="hljs python">    r[<span class="hljs-number">0</span>],g[<span class="hljs-number">0</span>],b[<span class="hljs-number">0</span>]=(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) <span class="hljs-comment">#对应默认的back_ground</span><br>    r[<span class="hljs-number">1</span>],g[<span class="hljs-number">1</span>],b[<span class="hljs-number">1</span>]=(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>) <span class="hljs-comment">#对应被标注的类别1, abnormal</span><br>    <span class="hljs-comment"># r[2],g[2],b[2]=(255,0,0) #对应被标注的类别2</span><br>    <span class="hljs-comment"># r[3],g[3],b[3]=(0,255,255) #对应被标注的类别3</span><br>    <span class="hljs-comment"># r[4],g[4],b[4]=(255,0,255) #对应被标注的类别4</span><br>```  <br><br>![](/img/<span class="hljs-number">2022</span>-08-06/label_change.png)<br><br>最终修改的的`json_to_dataset.py`如下：<br>```python<br><span class="hljs-keyword">import</span> numbers<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> color <span class="hljs-keyword">as</span> color_module<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> draw <span class="hljs-keyword">as</span> draw_module<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> utils<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">label_colormap</span>(<span class="hljs-params">n_label=<span class="hljs-number">256</span>, value=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Label colormap.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Parameters</span><br><span class="hljs-string">    ----------</span><br><span class="hljs-string">    n_labels: int</span><br><span class="hljs-string">        Number of labels (default: 256).</span><br><span class="hljs-string">    value: float or int</span><br><span class="hljs-string">        Value scale or value of label color in HSV space.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns</span><br><span class="hljs-string">    -------</span><br><span class="hljs-string">    cmap: numpy.ndarray, (N, 3), numpy.uint8</span><br><span class="hljs-string">        Label id to colormap.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bitget</span>(<span class="hljs-params">byteval, idx</span>):<br>        shape = byteval.shape + (<span class="hljs-number">8</span>,)<br>        <span class="hljs-keyword">return</span> np.unpackbits(byteval).reshape(shape)[..., -<span class="hljs-number">1</span> - idx]<br><br>    i = np.arange(n_label, dtype=np.uint8)<br>    r = np.full_like(i, <span class="hljs-number">0</span>)<br>    g = np.full_like(i, <span class="hljs-number">0</span>)<br>    b = np.full_like(i, <span class="hljs-number">0</span>)<br><br>    i = np.repeat(i[:, <span class="hljs-literal">None</span>], <span class="hljs-number">8</span>, axis=<span class="hljs-number">1</span>)<br>    i = np.right_shift(i, np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">24</span>, <span class="hljs-number">3</span>)).astype(np.uint8)<br>    j = np.arange(<span class="hljs-number">8</span>)[::-<span class="hljs-number">1</span>]<br>    r = np.bitwise_or.reduce(np.left_shift(bitget(i, <span class="hljs-number">0</span>), j), axis=<span class="hljs-number">1</span>)<br>    g = np.bitwise_or.reduce(np.left_shift(bitget(i, <span class="hljs-number">1</span>), j), axis=<span class="hljs-number">1</span>)<br>    b = np.bitwise_or.reduce(np.left_shift(bitget(i, <span class="hljs-number">2</span>), j), axis=<span class="hljs-number">1</span>)<br><br>    r[<span class="hljs-number">0</span>],g[<span class="hljs-number">0</span>],b[<span class="hljs-number">0</span>]=(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) <span class="hljs-comment">#对应默认的back_ground</span><br>    r[<span class="hljs-number">1</span>],g[<span class="hljs-number">1</span>],b[<span class="hljs-number">1</span>]=(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>) <span class="hljs-comment">#对应被标注的类别1, abnormal</span><br><br>    cmap = np.stack((r, g, b), axis=<span class="hljs-number">1</span>).astype(np.uint8)<br><br>    <span class="hljs-keyword">if</span> value <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        hsv = color_module.rgb2hsv(cmap.reshape(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(value, <span class="hljs-built_in">float</span>):<br>            hsv[:, <span class="hljs-number">1</span>:, <span class="hljs-number">2</span>] = hsv[:, <span class="hljs-number">1</span>:, <span class="hljs-number">2</span>].astype(<span class="hljs-built_in">float</span>) * value<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">assert</span> <span class="hljs-built_in">isinstance</span>(value, <span class="hljs-built_in">int</span>)<br>            hsv[:, <span class="hljs-number">1</span>:, <span class="hljs-number">2</span>] = value<br>        cmap = color_module.hsv2rgb(hsv).reshape(-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">return</span> cmap<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">label2rgb</span>(<span class="hljs-params"></span><br><span class="hljs-params">    label,</span><br><span class="hljs-params">    image=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">    alpha=<span class="hljs-number">0.5</span>,</span><br><span class="hljs-params">    label_names=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">    font_size=<span class="hljs-number">30</span>,</span><br><span class="hljs-params">    thresh_suppress=<span class="hljs-number">0</span>,</span><br><span class="hljs-params">    colormap=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">    loc=<span class="hljs-string">&quot;rb&quot;</span>,</span><br><span class="hljs-params">    font_path=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params"></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Convert label to rgb.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Parameters</span><br><span class="hljs-string">    ----------</span><br><span class="hljs-string">    label: numpy.ndarray, (H, W), int</span><br><span class="hljs-string">        Label image.</span><br><span class="hljs-string">    image: numpy.ndarray, (H, W, 3), numpy.uint8</span><br><span class="hljs-string">        RGB image.</span><br><span class="hljs-string">    alpha: float, or list or dict of float</span><br><span class="hljs-string">        Alpha of RGB (default: 0.5).</span><br><span class="hljs-string">        If given as a list or dict, it is treated as alpha for each class</span><br><span class="hljs-string">        according to the index or key.</span><br><span class="hljs-string">    label_names: list or dict of string</span><br><span class="hljs-string">        Label id to label name.</span><br><span class="hljs-string">    font_size: int</span><br><span class="hljs-string">        Font size (default: 30).</span><br><span class="hljs-string">    thresh_suppress: float</span><br><span class="hljs-string">        Threshold of label ratio in the label image.</span><br><span class="hljs-string">    colormap: numpy.ndarray, (M, 3), numpy.uint8</span><br><span class="hljs-string">        Label id to color.</span><br><span class="hljs-string">        By default, :func:`~imgviz.label_colormap` is used.</span><br><span class="hljs-string">    loc: string</span><br><span class="hljs-string">        Location of legend (default: &#x27;rb&#x27;).</span><br><span class="hljs-string">        &#x27;centroid&#x27;, &#x27;lt&#x27; and &#x27;rb&#x27; are supported.</span><br><span class="hljs-string">    font_path: str</span><br><span class="hljs-string">        Font path.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns</span><br><span class="hljs-string">    -------</span><br><span class="hljs-string">    res: numpy.ndarray, (H, W, 3), numpy.uint8</span><br><span class="hljs-string">        Visualized image.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> colormap <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        colormap = label_colormap()<br><br>    res = colormap[label]<br><br>    random_state = np.random.RandomState(seed=<span class="hljs-number">1234</span>)<br><br>    mask_unlabeled = label &lt; <span class="hljs-number">0</span><br>    res[mask_unlabeled] = random_state.rand(*(mask_unlabeled.<span class="hljs-built_in">sum</span>(), <span class="hljs-number">3</span>)) * <span class="hljs-number">255</span><br><br>    unique_labels = np.unique(label)<br>    max_label_id = unique_labels[-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(alpha, numbers.Number):<br>        alpha = np.array([alpha <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_label_id + <span class="hljs-number">1</span>)])<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(alpha, <span class="hljs-built_in">dict</span>):<br>        alpha = np.array([alpha.get(l, <span class="hljs-number">0.5</span>) <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_label_id + <span class="hljs-number">1</span>)])<br>    <span class="hljs-keyword">else</span>:<br>        alpha = np.asarray(alpha)<br>        <span class="hljs-keyword">assert</span> alpha.ndim == <span class="hljs-number">1</span><br>    <span class="hljs-keyword">assert</span> ((<span class="hljs-number">0</span> &lt;= alpha) &amp; (alpha &lt;= <span class="hljs-number">1</span>)).<span class="hljs-built_in">all</span>()<br>    alpha = alpha[label][:, :, <span class="hljs-literal">None</span>]<br><br>    <span class="hljs-keyword">if</span> image <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> image.ndim == <span class="hljs-number">2</span>:<br>            image = color_module.gray2rgb(image)<br>        res = (<span class="hljs-number">1</span> - alpha) * image.astype(<span class="hljs-built_in">float</span>) + alpha * res.astype(<span class="hljs-built_in">float</span>)<br>        res = np.clip(res.<span class="hljs-built_in">round</span>(), <span class="hljs-number">0</span>, <span class="hljs-number">255</span>).astype(np.uint8)<br><br>    <span class="hljs-keyword">if</span> label_names <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> res<br><br>    unique_labels = unique_labels[unique_labels != -<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(label_names, <span class="hljs-built_in">dict</span>):<br>        unique_labels = [l <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> unique_labels <span class="hljs-keyword">if</span> label_names.get(l)]<br>    <span class="hljs-keyword">else</span>:<br>        unique_labels = [l <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> unique_labels <span class="hljs-keyword">if</span> label_names[l]]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(unique_labels) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-keyword">if</span> loc == <span class="hljs-string">&quot;centroid&quot;</span>:<br>        res = utils.numpy_to_pillow(res)<br>        <span class="hljs-keyword">for</span> label_i <span class="hljs-keyword">in</span> unique_labels:<br>            mask = label == label_i<br>            <span class="hljs-keyword">if</span> <span class="hljs-number">1.0</span> * mask.<span class="hljs-built_in">sum</span>() / mask.size &lt; thresh_suppress:<br>                <span class="hljs-keyword">continue</span><br>            y, x = np.array(_center_of_mass(mask), dtype=<span class="hljs-built_in">int</span>)<br><br>            <span class="hljs-keyword">if</span> label[y, x] != label_i:<br>                Y, X = np.where(mask)<br>                point_index = np.random.randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(Y))<br>                y, x = Y[point_index], X[point_index]<br><br>            text = label_names[label_i]<br>            height, width = draw_module.text_size(<br>                text, size=font_size, font_path=font_path<br>            )<br>            color = color_module.get_fg_color(res.getpixel((x, y)))<br>            draw_module.text_(<br>                res,<br>                yx=(y - height // <span class="hljs-number">2</span>, x - width // <span class="hljs-number">2</span>),<br>                text=text,<br>                color=color,<br>                size=font_size,<br>                font_path=font_path,<br>            )<br>    <span class="hljs-keyword">elif</span> loc <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;rb&quot;</span>, <span class="hljs-string">&quot;lt&quot;</span>]:<br>        text_sizes = np.array(<br>            [<br>                draw_module.text_size(<br>                    label_names[l], font_size, font_path=font_path<br>                )<br>                <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> unique_labels<br>            ]<br>        )<br>        text_height, text_width = text_sizes.<span class="hljs-built_in">max</span>(axis=<span class="hljs-number">0</span>)<br>        legend_height = text_height * <span class="hljs-built_in">len</span>(unique_labels) + <span class="hljs-number">5</span><br>        legend_width = text_width + <span class="hljs-number">20</span> + (text_height - <span class="hljs-number">10</span>)<br><br>        height, width = label.shape[:<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">if</span> loc == <span class="hljs-string">&quot;rb&quot;</span>:<br>            aabb2 = np.array([height - <span class="hljs-number">5</span>, width - <span class="hljs-number">5</span>], dtype=<span class="hljs-built_in">float</span>)<br>            aabb1 = aabb2 - (legend_height, legend_width)<br>        <span class="hljs-keyword">elif</span> loc == <span class="hljs-string">&quot;lt&quot;</span>:<br>            aabb1 = np.array([<span class="hljs-number">5</span>, <span class="hljs-number">5</span>], dtype=<span class="hljs-built_in">float</span>)<br>            aabb2 = aabb1 + (legend_height, legend_width)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;unexpected loc: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(loc))<br><br>        alpha = <span class="hljs-number">0.5</span><br>        y1, x1 = aabb1.<span class="hljs-built_in">round</span>().astype(<span class="hljs-built_in">int</span>)<br>        y2, x2 = aabb2.<span class="hljs-built_in">round</span>().astype(<span class="hljs-built_in">int</span>)<br>        res[y1:y2, x1:x2] = alpha * res[y1:y2, x1:x2] + alpha * <span class="hljs-number">255</span><br><br>        res = utils.numpy_to_pillow(res)<br>        <span class="hljs-keyword">for</span> i, l <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(unique_labels):<br>            box_aabb1 = aabb1 + (i * text_height + <span class="hljs-number">5</span>, <span class="hljs-number">5</span>)<br>            box_aabb2 = box_aabb1 + (text_height - <span class="hljs-number">10</span>, text_height - <span class="hljs-number">10</span>)<br>            draw_module.rectangle_(<br>                res, aabb1=box_aabb1, aabb2=box_aabb2, fill=colormap[l]<br>            )<br>            draw_module.text_(<br>                res,<br>                yx=aabb1 + (i * text_height, <span class="hljs-number">10</span> + (text_height - <span class="hljs-number">10</span>)),<br>                text=label_names[l],<br>                size=font_size,<br>                font_path=font_path,<br>            )<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;unsupported loc: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(loc))<br><br>    <span class="hljs-keyword">return</span> utils.pillow_to_numpy(res)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_center_of_mass</span>(<span class="hljs-params">mask</span>):<br>    <span class="hljs-keyword">assert</span> mask.ndim == <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> mask.dtype == <span class="hljs-built_in">bool</span><br>    mask = <span class="hljs-number">1.0</span> * mask / mask.<span class="hljs-built_in">sum</span>()<br>    dx = np.<span class="hljs-built_in">sum</span>(mask, <span class="hljs-number">0</span>)<br>    dy = np.<span class="hljs-built_in">sum</span>(mask, <span class="hljs-number">1</span>)<br>    cx = np.<span class="hljs-built_in">sum</span>(dx * np.arange(mask.shape[<span class="hljs-number">1</span>]))<br>    cy = np.<span class="hljs-built_in">sum</span>(dy * np.arange(mask.shape[<span class="hljs-number">0</span>]))<br>    <span class="hljs-keyword">return</span> cy, cx<br></code></pre></td></tr></table></figure><h1 id="创建批量bash脚本"><a href="#创建批量bash脚本" class="headerlink" title="创建批量bash脚本"></a>创建批量bash脚本</h1><p>新建<code>json2mask.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">mkdir</span> ./mask <span class="hljs-comment">#也可手动将./修改成json和png所在的目录路径</span><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> ./*.json <span class="hljs-comment">#也可手将./修改成json和png所在的目录路劲g</span><br><span class="hljs-keyword">do</span><br>   labelme_json_to_dataset <span class="hljs-variable">$file</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>可以直接将<code>json2mask.sh</code>保存在<code>example.json</code>标记文件所在的目录下，在labelme的conda环境下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sh json2mask.sh<br></code></pre></td></tr></table></figure><p>即可完成标记文件批量的转换</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://github.com/wkentaro/labelme#anaconda">(GitHub) labelme: Image Polygonal Annotation with Python</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://chowdera.com/2022/117/202204290443463482.html">2021-08-02 convert JSON files into mask in batch and generate train Txt path make_ path. py (chowdera.com)</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://blog.csdn.net/HeiSeXingYe/article/details/123546167"> labelme显示中文图例和控制类别的mask颜色_HeiSeXingYe的博客</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://icode.best/i/69645141185615">python批量删除文件名中的下划线-代码详解-爱代码爱编程 (icode.best)</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_39924674/article/details/110322777">python获取当前文件夹名称_在Python中获取文件的文件夹名称_weixin_39924674的博客</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://blog.csdn.net/suibianshen2012/article/details/84303647">python 删除文件夹、删除非空文件夹_suibianshen2012的博客</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://blog.csdn.net/qq_23489303/article/details/78062697">shell命令批量处理文件_张晶新的博客</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:8" class="footnote-text"><span><a href="https://stackoverflow.com/questions/57004792/what-is-imagedata-in-json-file-which-comes-from-labelme-tool">data annotations - What is imageData in JSON file which comes from labelme tool? - Stack Overflow</a><a href="#fnref:8" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Conda</tag>
      
      <tag>Labelme</tag>
      
      <tag>Json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS229机器学习笔记</title>
    <link href="/2022/07/25/015f665edc89/"/>
    <url>/2022/07/25/015f665edc89/</url>
    
    <content type="html"><![CDATA[<h1 id="学习环境搭建"><a href="#学习环境搭建" class="headerlink" title="学习环境搭建"></a>学习环境搭建</h1><h2 id="Git下载课程作业源码"><a href="#Git下载课程作业源码" class="headerlink" title="Git下载课程作业源码"></a>Git下载课程作业源码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/dibgerge/ml-coursera-python-assignments.git<br></code></pre></td></tr></table></figure><p>进入课程文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ml-coursera-python-assignments<br></code></pre></td></tr></table></figure><h2 id="安装Python依赖环境"><a href="#安装Python依赖环境" class="headerlink" title="安装Python依赖环境"></a>安装Python依赖环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda <span class="hljs-built_in">env</span> create -f environment.yml<br></code></pre></td></tr></table></figure><p>激活环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate machine_learning<br></code></pre></td></tr></table></figure><h2 id="可选（vscode可使用jupyter插件）"><a href="#可选（vscode可使用jupyter插件）" class="headerlink" title="可选（vscode可使用jupyter插件）"></a>可选（vscode可使用jupyter插件）</h2><p>打开<code>Jupyter Notebook</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jupyter notebook<br></code></pre></td></tr></table></figure><p>然后打开<code>Exercise</code>文件夹里对应的<code>*.ipynb</code>文件即可</p><h1 id="监督学习-Supervised-Learning"><a href="#监督学习-Supervised-Learning" class="headerlink" title="监督学习 Supervised Learning"></a>监督学习 Supervised Learning</h1><p>Learn from <strong>labeled data</strong> with <strong>“right answers”</strong>. </p><h2 id="回归-Regression"><a href="#回归-Regression" class="headerlink" title="回归 Regression"></a>回归 Regression</h2><p>Predict a <strong>number</strong>.<br><strong>Infinetly</strong> many possible outputs. </p><h2 id="分类-Classification"><a href="#分类-Classification" class="headerlink" title="分类 Classification"></a>分类 Classification</h2><p>Predict <strong>categories</strong>.<br>Small number of <strong>possible outputs</strong>. </p><p><img src="/img/2022-07-25/(un)supervised.jpg"></p><h1 id="非监督学习-Unsupervised-Learning"><a href="#非监督学习-Unsupervised-Learning" class="headerlink" title="非监督学习 Unsupervised Learning"></a>非监督学习 Unsupervised Learning</h1><p>Find something in <strong>unlabeled data</strong>, inputs $x$ without ouput labels $y$.<br>Algorithm finds <strong>structure</strong> inside data. </p><p><img src="/img/2022-07-25/unsupervised.jpg"></p><h2 id="聚类-Clustering"><a href="#聚类-Clustering" class="headerlink" title="聚类 Clustering"></a>聚类 Clustering</h2><p>Group similar data points together. e.g.: </p><h3 id="Google-News将相关新闻聚类起来"><a href="#Google-News将相关新闻聚类起来" class="headerlink" title="Google News将相关新闻聚类起来"></a>Google News将相关新闻聚类起来</h3><p>Panda，twin关键词</p><h3 id="DNA-microarray"><a href="#DNA-microarray" class="headerlink" title="DNA microarray"></a>DNA microarray</h3><p>把人分为几组，基因和个体特征的联系</p><h3 id="Grouping-customers"><a href="#Grouping-customers" class="headerlink" title="Grouping customers"></a>Grouping customers</h3><p>分类不同的客户，了解他们的需求</p><h2 id="异常检测-Anomaly-detection"><a href="#异常检测-Anomaly-detection" class="headerlink" title="异常检测 Anomaly detection"></a>异常检测 Anomaly detection</h2><p>Find unusual data points. </p><h2 id="降维-Dimensionality-reduction"><a href="#降维-Dimensionality-reduction" class="headerlink" title="降维 Dimensionality reduction"></a>降维 Dimensionality reduction</h2><p>Compress data using fewer numbers. </p><h1 id="Jupyter-Notebooks"><a href="#Jupyter-Notebooks" class="headerlink" title="Jupyter Notebooks"></a>Jupyter Notebooks</h1><h2 id="笔记块-Markdown-Cell"><a href="#笔记块-Markdown-Cell" class="headerlink" title="笔记块 Markdown Cell"></a>笔记块 Markdown Cell</h2><p>Mardown笔记</p><h2 id="代码块-Code-cell"><a href="#代码块-Code-cell" class="headerlink" title="代码块 Code cell"></a>代码块 Code cell</h2><p>可以运行代码</p><h1 id="线性回归模型-Linear-Regression-Model"><a href="#线性回归模型-Linear-Regression-Model" class="headerlink" title="线性回归模型 Linear Regression Model"></a>线性回归模型 Linear Regression Model</h1><h2 id="术语-Terminology"><a href="#术语-Terminology" class="headerlink" title="术语 Terminology"></a>术语 Terminology</h2><h3 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h3><p>Data used to train the model.  </p><h3 id="Notation"><a href="#Notation" class="headerlink" title="Notation"></a>Notation</h3><p>$x&#x3D;$ “input” variable feature<br>$y&#x3D;$ “output” variable, “target” variable<br>$m&#x3D;$ number of training examples<br>$(x,y)&#x3D;$ single training example<br>$(x^{(i)},y^{(i)})&#x3D;i^{th}$ training example, $(1^{st}, 2^{nd}, 3^{rd}, …)$<br>$\hat{y}&#x3D;$ estimated target $y$</p><h3 id="单变量-Univariate"><a href="#单变量-Univariate" class="headerlink" title="单变量 Univariate"></a>单变量 Univariate</h3><p>One variable</p><h2 id="代价函数-Cost-Function"><a href="#代价函数-Cost-Function" class="headerlink" title="代价函数 Cost Function"></a>代价函数 Cost Function</h2><p><strong>Model:</strong><br>$$<br>f_{w,b}(x)&#x3D;wx+b<br>$$<br><strong>Parameters:</strong><br>$$<br>w,b<br>$$<br><strong>Squared error cost function:</strong> for linear regression or any function<br>$$<br>J(w,b)&#x3D;\frac{1}{2m}\sum_{m}^{i&#x3D;1}(f_{w,b}(x^{(i)})-y^{(i)})^2<br>$$<br><strong>Goal:</strong><br>$$<br>\min_{w,b}J(w,b)<br>$$</p><h3 id="延申到其他函数"><a href="#延申到其他函数" class="headerlink" title="延申到其他函数"></a>延申到其他函数</h3><p>$$<br>\min_{w_1,w_2,…,b}J(w_1,w_2,…,b)<br>$$</p><h1 id="梯度下降-Gradient-descent"><a href="#梯度下降-Gradient-descent" class="headerlink" title="梯度下降 Gradient descent"></a>梯度下降 Gradient descent</h1><p>$$<br>w&#x3D;w-α\frac{\partial}{ {\partial}w}J(w,b)<br>$$</p><p>$$<br>b&#x3D;b-α\frac{\partial}{ {\partial}b}J(w,b)<br>$$</p><p><strong>Learning Rate:</strong> $α$<br><strong>Derivative:</strong> $\frac{\partial}{ {\partial}w}J(w,b)$<br><img src="/img/2022-07-25/w-%CE%B1.png">  </p><div class="note note-success">            <p>Correct: 需要同时同步$w, b$<br>$$<br>w&#x3D;w-α \frac{\partial}{ {\partial}w}J(w)<br>$$</p>          </div><h2 id="Batch-gradient-descent"><a href="#Batch-gradient-descent" class="headerlink" title="Batch gradient descent"></a>Batch gradient descent</h2><p><strong>batch:</strong> each step of gradient descent uses all the traning exaples</p><h1 id="多类特征-Multible-features"><a href="#多类特征-Multible-features" class="headerlink" title="多类特征 Multible features"></a>多类特征 Multible features</h1><h2 id="向量-Vector"><a href="#向量-Vector" class="headerlink" title="向量 Vector"></a>向量 Vector</h2><p>$$<br>f_{w,b}(x)&#x3D;w_1x_1+w_2x_2+···+w_nx_n+b<br>$$<br>$$<br>f_{\vec{w},b}&#x3D;\vec{w}·\vec{x}+b<br>$$</p><h2 id="向量化-Vectorization"><a href="#向量化-Vectorization" class="headerlink" title="向量化 Vectorization"></a>向量化 Vectorization</h2><p><strong>Numpy</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">w = np.array([<span class="hljs-number">1.0</span>,<span class="hljs-number">2.5</span>,-<span class="hljs-number">2.5</span>])<br>b = <span class="hljs-number">4</span><br>x = np.array([<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>])<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>编程语言中，通常从0开始计数:<br>x[0], x[1], x[2]   </p>          </div>  <h3 id="无向量化的代码"><a href="#无向量化的代码" class="headerlink" title="无向量化的代码"></a>无向量化的代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>):<br>    f = f + w[j] * x[j]<br></code></pre></td></tr></table></figure><h3 id="向量化可以简化代码，提升效率"><a href="#向量化可以简化代码，提升效率" class="headerlink" title="向量化可以简化代码，提升效率"></a>向量化可以简化代码，提升效率</h3><p>$$<br>f_{\vec{w},b}&#x3D;\vec{w}·\vec{x}+b<br>$$<br>对应代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">f = np.dot(w,x)+b<br></code></pre></td></tr></table></figure><h1 id="特征缩放"><a href="#特征缩放" class="headerlink" title="特征缩放"></a>特征缩放</h1><h2 id="最大值归一化"><a href="#最大值归一化" class="headerlink" title="最大值归一化"></a>最大值归一化</h2><p>$$\frac{x}{x_{max} }$$</p><h2 id="平均数归一化"><a href="#平均数归一化" class="headerlink" title="平均数归一化"></a>平均数归一化</h2><p>$$\frac{x}{x_{max}-x_{min} }$$</p><h2 id="Z归一化"><a href="#Z归一化" class="headerlink" title="Z归一化"></a>Z归一化</h2><p>标准偏差 standard deviation<br>$$x_1&#x3D;\frac{x_1-μ_1}{σ_1}$$</p><h2 id="检查提督是否收敛"><a href="#检查提督是否收敛" class="headerlink" title="检查提督是否收敛"></a>检查提督是否收敛</h2><p>iterations need varies<br><strong>判定方法：</strong><br>let $ε$ be $10^{-3}$, if the cost $J(\vec{w},b)&lt;ε$</p><h2 id="训练曲线-Training-curve"><a href="#训练曲线-Training-curve" class="headerlink" title="训练曲线 Training curve"></a>训练曲线 Training curve</h2><p>不收敛，震荡等: Learning rate $α$ too large  </p><h2 id="学习速率等选择"><a href="#学习速率等选择" class="headerlink" title="学习速率等选择"></a>学习速率等选择</h2><p>$α$的范围选择：…0.001, 0.01, 0.1, 1 …</p><p><img src="/img/2022-07-25/%CE%B1_rate.png"></p><h2 id="特征工程-Feature-engineering"><a href="#特征工程-Feature-engineering" class="headerlink" title="特征工程 Feature engineering"></a>特征工程 Feature engineering</h2><p>$$<br>f_{\vec{w},b}(x)&#x3D;w_1x_1+w_2x_2+b<br>$$<br><strong>New feature:</strong><br>$$<br>x_3&#x3D;x_1x_2<br>$$<br><strong>New function:</strong> could be better<br>$$<br>f_{\vec{w},b}(x)&#x3D;w_1x_1+w_2x_2+w_3x_3+b<br>$$</p><h2 id="多项式回归-Polynomial-regression"><a href="#多项式回归-Polynomial-regression" class="headerlink" title="多项式回归 Polynomial regression"></a>多项式回归 Polynomial regression</h2><p>$$<br>f_{\vec{w},b}(x)&#x3D;w_1x+w_2x^2+w_3x^3+b<br>$$</p><h1 id="动机-Motivation"><a href="#动机-Motivation" class="headerlink" title="动机 Motivation"></a>动机 Motivation</h1><h2 id="Classifiction"><a href="#Classifiction" class="headerlink" title="Classifiction"></a>Classifiction</h2><p>设置阈值：threshold $\hat{y}$ via <strong>Linear Regression</strong></p><div class="note note-success">            <p> 在分类任务里，并不推荐线性回归<br>一些术语：decision boundary，logistic regression  </p>          </div><h2 id="逻辑回归-Logistic-regression"><a href="#逻辑回归-Logistic-regression" class="headerlink" title="逻辑回归 Logistic regression"></a>逻辑回归 Logistic regression</h2><p>output between 0 and 1<br>$$<br>f_{\vec{w},b}(\vec{x})&#x3D;\frac{1}{1+e^{-(\vec{w}·\vec{x}+b)} }<br>$$</p><h3 id="Decesion-boundary"><a href="#Decesion-boundary" class="headerlink" title="Decesion boundary"></a>Decesion boundary</h3><p>$$<br>z&#x3D;\vec{w}·\vec{x}+b<br>$$<br>$$<br>f_{\vec{w},b}(\vec{x})&#x3D;g(z)<br>$$<br>$g(z)$ is S型函数 sigmoid function。</p><p><img src="/img/2022-07-25/boundary.png"></p><h1 id="逻辑回归的代价函数-Cost-function-of-Logistic-regression"><a href="#逻辑回归的代价函数-Cost-function-of-Logistic-regression" class="headerlink" title="逻辑回归的代价函数 Cost function of Logistic regression"></a>逻辑回归的代价函数 Cost function of Logistic regression</h1><p><img src="/img/2022-07-25/error_cost.png"></p><h2 id="损失函数-Loss-function"><a href="#损失函数-Loss-function" class="headerlink" title="损失函数 Loss function"></a>损失函数 Loss function</h2><p>$$<br>L(f_{\vec{w},b}(x^{(i)}),y^{(i)})&#x3D;\begin{cases} -log(f_{\vec{w},b}(x^{(i)})), &amp; \text{if $y^{(i)}&#x3D;1$} \ -log(1-f_{\vec{w},b}(x^{(i)})),&amp; \text{if $y^{(i)}&#x3D;0$}\end{cases}<br>$$</p><h2 id="简化损失函数-Simplied-loss-function"><a href="#简化损失函数-Simplied-loss-function" class="headerlink" title="简化损失函数 Simplied loss function"></a>简化损失函数 Simplied loss function</h2><p>$$<br>L(f_{\vec{w},b}(x^{(i)}),y^{(i)})&#x3D;-y^{(i)}log(f_{\vec{w},b}(x^{(i)}))-(1-y^{(i)})log(1-f_{\vec{w},b}(x^{(i)}))<br>$$<br>so 损失函数：<br>$$<br>J(\vec{w},b)&#x3D;\frac{1}{m}\sum_{i&#x3D;1}^m[L(f_{\vec{w},b}(x^{(i)}),y^{(i)})]&#x3D;\frac{1}{m}\sum_{i&#x3D;1}^m[-y^{(i)}log(f_{\vec{w},b}(x^{(i)}))-(1-y^{(i)})log(1-f_{\vec{w},b}(x^{(i)}))]<br>$$</p><h1 id="过拟合-Overfitting"><a href="#过拟合-Overfitting" class="headerlink" title="过拟合 Overfitting"></a>过拟合 Overfitting</h1><p>Fits the training sets extremely well: <strong>high variance</strong></p><h2 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h2><p><img src="/img/2022-07-25/overfit.png"></p><h2 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h2><p><img src="/img/2022-07-25/overfit2.png"></p><h2 id="避免过拟合"><a href="#避免过拟合" class="headerlink" title="避免过拟合"></a>避免过拟合</h2><h3 id="拿到更多的数据"><a href="#拿到更多的数据" class="headerlink" title="拿到更多的数据"></a>拿到更多的数据</h3><p>collect more training examples</p><h3 id="用合适的子数据"><a href="#用合适的子数据" class="headerlink" title="用合适的子数据"></a>用合适的子数据</h3><p><strong>feature selection:</strong> chosing most relevant subset of data</p><h3 id="正则化-Regularization"><a href="#正则化-Regularization" class="headerlink" title="正则化 Regularization"></a>正则化 Regularization</h3><p>减小各个系数$w$的值，Reduce the size of parameters $w_j$, 可以不管$b$<br>$$<br>J(\vec{w},b)&#x3D;\frac{1}{2m}\sum_{i&#x3D;1}^m(f_{\vec{w},b}(\vec{x}^{(i)})-y^{(i)})^2+\frac{λ}{2m}\sum_{j&#x3D;1}^nw_j^2<br>$$<br>$λ$ balances both goals：<br><strong>平衡参数</strong>$λ$：平衡拟合，并且保持各个系数$w_j$最小。<br>Gradient descent</p><p><img src="/img/2022-07-25/w_j_shrink.png"></p><h1 id="高级学习函数-Advanced-learning-algorithms-（大纲）"><a href="#高级学习函数-Advanced-learning-algorithms-（大纲）" class="headerlink" title="高级学习函数 Advanced learning algorithms （大纲）"></a>高级学习函数 Advanced learning algorithms （大纲）</h1><h2 id="神经网络-Neural-Networks"><a href="#神经网络-Neural-Networks" class="headerlink" title="神经网络 Neural Networks"></a>神经网络 Neural Networks</h2><h3 id="预测-inference-prediction"><a href="#预测-inference-prediction" class="headerlink" title="预测 inference (prediction)"></a>预测 inference (prediction)</h3><h3 id="训练-training"><a href="#训练-training" class="headerlink" title="训练 training"></a>训练 training</h3><h2 id="构建机器学习系统的建议-Practical-advice-for-building-ML-systems"><a href="#构建机器学习系统的建议-Practical-advice-for-building-ML-systems" class="headerlink" title="构建机器学习系统的建议 Practical advice for building ML systems"></a>构建机器学习系统的建议 Practical advice for building ML systems</h2><h2 id="决策树-Decesion-trees"><a href="#决策树-Decesion-trees" class="headerlink" title="决策树 Decesion trees"></a>决策树 Decesion trees</h2><h1 id="神经网络-Neural-networks"><a href="#神经网络-Neural-networks" class="headerlink" title="神经网络 Neural networks"></a>神经网络 Neural networks</h1><p>简化神经元的模型 Simplified mathematical model of a neuron<br>输入与输出 inputs &amp; outputs</p><h2 id="Layer"><a href="#Layer" class="headerlink" title="Layer"></a>Layer</h2><p>一组神经元 A group of neurons</p><p><img src="/img/2022-07-25/demand-prediction.png"></p><p>input layer - compute layer - output layer<br>4 number - 3 numbers - 1 number</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>神经网络会自主学习特征 Neural networks will learn features</p><h2 id="Multi-hiden-layers"><a href="#Multi-hiden-layers" class="headerlink" title="Multi hiden layers"></a>Multi hiden layers</h2><h1 id="图像识别-Image-recogonization"><a href="#图像识别-Image-recogonization" class="headerlink" title="图像识别 Image recogonization"></a>图像识别 Image recogonization</h1><h2 id="人脸识别-Face-recognization"><a href="#人脸识别-Face-recognization" class="headerlink" title="人脸识别 Face recognization"></a>人脸识别 Face recognization</h2><h2 id="汽车识别-Car-classification"><a href="#汽车识别-Car-classification" class="headerlink" title="汽车识别 Car classification"></a>汽车识别 Car classification</h2><h1 id="做出预测-Inference"><a href="#做出预测-Inference" class="headerlink" title="做出预测 Inference"></a>做出预测 Inference</h1><p><img src="/img/2022-07-25/digit_inference.png"></p><h2 id="TensorFlow-实现"><a href="#TensorFlow-实现" class="headerlink" title="TensorFlow 实现"></a>TensorFlow 实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">x = np.array([[<span class="hljs-number">200.0</span>, <span class="hljs-number">17.0</span>]])<br>layer_1 = Dense(units=<span class="hljs-number">3</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>)<br>a1 = layer_1(x)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">layer_2 = Dense(units=<span class="hljs-number">1</span>, activation=<span class="hljs-string">&#x27;sigmoid&#x27;</span>)<br>a1 = layer_2(a1)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> a2 &gt;= <span class="hljs-number">0.5</span>,<br>    yhat = <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>: <br>    yhat = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p>Numpy需要两个括号“[[]]” 是因为1x2的矩阵表达，计算更加有效率 </p><p><img src="/img/2022-07-25/numpy_matrix.png"></p><p>Sigmoid Function：<br>$$<br>S(x)&#x3D;\frac{1}{1+e^{-x} }<br>$$</p>          </div><h3 id="numpy和ternsorflow转换"><a href="#numpy和ternsorflow转换" class="headerlink" title="numpy和ternsorflow转换"></a>numpy和ternsorflow转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">a2.numpy() <span class="hljs-comment">#TensorFlow转换为Numpy数据</span><br></code></pre></td></tr></table></figure><h3 id="搭建神经网络"><a href="#搭建神经网络" class="headerlink" title="搭建神经网络"></a>搭建神经网络</h3><p>合并两个Layer</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">layer_1 = Dense(units=<span class="hljs-number">3</span>, activation=<span class="hljs-string">&quot;sigmoid&quot;</span>)<br>layer_2 = Dense(units=<span class="hljs-number">1</span>, activation=<span class="hljs-string">&quot;sigmoid&quot;</span>)<br>model = Sequential([layer_1, layer_2])<br></code></pre></td></tr></table></figure><p>另一种实现（常用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">model = Sequential([Dense(units=<span class="hljs-number">3</span>, activation=<span class="hljs-string">&quot;sigmoid&quot;</span>), Dense(units=<span class="hljs-number">1</span>, activation=<span class="hljs-string">&quot;sigmoid&quot;</span>)])<br></code></pre></td></tr></table></figure><p>组合之后的inference过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">model.<span class="hljs-built_in">compile</span>(...)<br>x = np.array([<span class="hljs-number">0.</span>.., <span class="hljs-number">245</span>, ..., <span class="hljs-number">17</span>], [<span class="hljs-number">0.</span>.., <span class="hljs-number">200</span>, ..., <span class="hljs-number">184</span>])<br>y = np.array([<span class="hljs-number">1</span>,<span class="hljs-number">0</span>])<br>model.fit(x,y)<br>model.predict(x_new)<br></code></pre></td></tr></table></figure><p><img src="/img/2022-07-25/NumPy.jpeg"></p><h1 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h1><h2 id="ANI-vs-AGI-narrow-vs-giant"><a href="#ANI-vs-AGI-narrow-vs-giant" class="headerlink" title="ANI vs AGI (narrow vs giant)"></a>ANI vs AGI (narrow vs giant)</h2><h2 id="循环和向量化的对比-loops-vs-vectoriation"><a href="#循环和向量化的对比-loops-vs-vectoriation" class="headerlink" title="循环和向量化的对比 loops vs vectoriation"></a>循环和向量化的对比 loops vs vectoriation</h2><p>向量化的工作大大提高深度学习的效率  </p><p><img src="/img/2022-07-25/vectorize.png"></p><p><strong>NumPy的Matrix Multiplication函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">X = np.array([[<span class="hljs-number">200</span>, <span class="hljs-number">17</span>]])<br>W = np.array([[<span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">5</span>],[-<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">6</span>]])<br>B = np.array([[-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]])<br>np.matmal(A_in, W) + B<br></code></pre></td></tr></table></figure><h3 id="矩阵乘法-Matrix-multiplication"><a href="#矩阵乘法-Matrix-multiplication" class="headerlink" title="矩阵乘法 Matrix multiplication"></a>矩阵乘法 Matrix multiplication</h3><p>转置矩阵$A$<br>计算规则</p><p><img src="/img/2022-07-25/matrix_multi.png"></p><h1 id="使用TensorFlow来训练神经网络"><a href="#使用TensorFlow来训练神经网络" class="headerlink" title="使用TensorFlow来训练神经网络"></a>使用TensorFlow来训练神经网络</h1><h2 id="训练步骤"><a href="#训练步骤" class="headerlink" title="训练步骤"></a>训练步骤</h2><p><strong>epochs：</strong><br>number of steps in gradient desenct<br>梯度下降过程的步数<br><strong>训练主要步骤：</strong><br>第一步：指定模型，告诉TF如何计算来预测<br>第二步：使用特定损失函数强化模型<br>第三步：训练模型  </p><h2 id="训练细节"><a href="#训练细节" class="headerlink" title="训练细节"></a>训练细节</h2><p>定义模型，<br>$$<br>f_{\vec{w},b}(x)&#x3D;?<br>$$<br>指定损失和代价函数<br>$$<br>L(f_{\vec{w},b}(x))<br>$$<br>$$<br>J({\vec{w},b})&#x3D;\frac{1}{m}\sum_{i&#x3D;1}^mL(f_{\vec{w},b}(x^{(i)}),y^{(i)})<br>$$<br>训练使得$J({\vec{w},b})$最小</p><h3 id="逻辑回归-logistic-regression"><a href="#逻辑回归-logistic-regression" class="headerlink" title="逻辑回归 logistic regression"></a>逻辑回归 logistic regression</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">z = np.dot(w,x) + b<br>f_x = <span class="hljs-number">1</span>/(<span class="hljs-number">1</span> + np.exp(-z))<br></code></pre></td></tr></table></figure><h3 id="逻辑损失-logistic-loss"><a href="#逻辑损失-logistic-loss" class="headerlink" title="逻辑损失 logistic loss"></a>逻辑损失 logistic loss</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = -y * np.log(f_x) - (<span class="hljs-number">1</span>-y) * np.log(<span class="hljs-number">1</span>-f_x)<br>w = w - alpha * dj_dw <span class="hljs-comment">#w权重，alpha回归速率</span><br>b = b - alpha * dj_db<br></code></pre></td></tr></table></figure><h3 id="神经网络-neural-network"><a href="#神经网络-neural-network" class="headerlink" title="神经网络 neural network"></a>神经网络 neural network</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">model = Sequential ([<br>    Dense(...)<br>    Dense(...)<br>    Dense(...)<br>    ])<br></code></pre></td></tr></table></figure><h3 id="二元交叉熵-binary-cross-entropy"><a href="#二元交叉熵-binary-cross-entropy" class="headerlink" title="二元交叉熵 binary cross entropy"></a>二元交叉熵 binary cross entropy</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">model.<span class="hljs-built_in">compile</span>(loss=BinaryCrossentropy())<br>model.fit(X,y,epochs=<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>$$<br>L(f_{\vec{w},b}(x^{(i)}),y^{(i)})&#x3D;-y^{(i)}log(f_{\vec{w},b}(x^{(i)}))-(1-y^{(i)})log(1-f_{\vec{w},b}(x^{(i)}))<br>$$</p><h2 id="Activation-Functions"><a href="#Activation-Functions" class="headerlink" title="Activation Functions"></a>Activation Functions</h2><h3 id="Linear-activation-function"><a href="#Linear-activation-function" class="headerlink" title="Linear activation function"></a>Linear activation function</h3><p>$$<br>g(z)&#x3D;z<br>$$<br>Sigmoid<br>$$<br>g(z)&#x3D; \frac{1}{(1 + e^{-z})}<br>$$<br>ReLU (Rectified Linear Unit)<br>$$<br>g(z)&#x3D;max(0,z)<br>$$</p><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL2部署PyTorch环境</title>
    <link href="/2022/07/18/2dcfa60c8f60/"/>
    <url>/2022/07/18/2dcfa60c8f60/</url>
    
    <content type="html"><![CDATA[<h1 id="软硬件概述"><a href="#软硬件概述" class="headerlink" title="软硬件概述"></a>软硬件概述</h1><p><strong>OS:</strong> Microsoft Windows 11<br><strong>GPU:</strong> NVIDIA RTX 2070</p><h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><h2 id="启用Linux子系统WSL2"><a href="#启用Linux子系统WSL2" class="headerlink" title="启用Linux子系统WSL2"></a>启用Linux子系统WSL2</h2><p>控制面板-&gt;程序-&gt;启用或关闭windows功能，开启：<code>Windows虚拟机平台</code>和<code>Linux子系统(WSL2)</code>  </p><div class="note note-success">            <p>BIOS需要开启CPU的虚拟化</p>          </div><h2 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h2><p>打开Microsoft Store，搜索<a href="https://www.microsoft.com/store/productId/9PDXGNCFSCZV">Ubuntu</a>安装</p><p><img src="/img/2022-07-18/Ubuntu.jpg"></p><h2 id="配置WSL2自启及SSHD服务"><a href="#配置WSL2自启及SSHD服务" class="headerlink" title="配置WSL2自启及SSHD服务"></a>配置WSL2自启及SSHD服务</h2><h3 id="编写自启动vbs"><a href="#编写自启动vbs" class="headerlink" title="编写自启动vbs"></a>编写自启动vbs</h3><p>打开记事本，内容如下：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vb"><span class="hljs-keyword">Set</span> ws = CreateObject(<span class="hljs-string">&quot;Wscript.Shell&quot;</span>)<br>ws.run <span class="hljs-string">&quot;wsl -d ubuntu -u root /etc/init.d/ssh start&quot;</span>, vbhide<br></code></pre></td></tr></table></figure><p>保存为<code>ubuntu.vbs</code>文件。  </p><h3 id="添加启动项"><a href="#添加启动项" class="headerlink" title="添加启动项"></a>添加启动项</h3><p><code>Win+R</code>运行: </p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">shell:</span>startup<br></code></pre></td></tr></table></figure><p><img src="/img/2022-07-18/startup.jpg"></p><p>将<code>ubuntu.vbs</code>文件放入打开的启动项文件夹内即可实现开机自启动并打开sshd服务远程连接。这种方法支持从另一台机器访问WSL2。</p><h3 id="附：在本机Windows下通过VSCode连接WSL2"><a href="#附：在本机Windows下通过VSCode连接WSL2" class="headerlink" title="附：在本机Windows下通过VSCode连接WSL2"></a>附：在本机Windows下通过VSCode连接WSL2</h3><p>只需要下载Microsoft提供的<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">WSL Extension插件</a>即可自动识别本机的WSL2子系统进行连接。</p><h2 id="初始化Ubuntu"><a href="#初始化Ubuntu" class="headerlink" title="初始化Ubuntu"></a>初始化Ubuntu</h2><p>在Windows开始菜单打开Ubuntu，等待片刻弹出窗口提示设定用户名和密码，输入后按<code>enter</code>即可</p><h2 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h2><div class="note note-success">            <p>根据<a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html#getting-started-with-cuda-on-wsl">CUDA官网的WSL安装教程</a>，最新的NVIDIA显卡驱动（516.59）已包含对WSL2的全面支持，无需单独安装Linux版的显卡驱动 </p>          </div><h3 id="删除旧的GPG-key"><a href="#删除旧的GPG-key" class="headerlink" title="删除旧的GPG key"></a>删除旧的GPG key</h3><p>在Ubuntu的终端窗口输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-key del 7fa2af80<br></code></pre></td></tr></table></figure><h3 id="安装Linux-x86-CUDA-Toolkit"><a href="#安装Linux-x86-CUDA-Toolkit" class="headerlink" title="安装Linux x86 CUDA Toolkit"></a>安装Linux x86 CUDA Toolkit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin<br>sudo <span class="hljs-built_in">mv</span> cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600<br>wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda-repo-wsl-ubuntu-11-7-local_11.7.0-1_amd64.deb<br>sudo dpkg -i cuda-repo-wsl-ubuntu-11-7-local_11.7.0-1_amd64.deb<br>sudo apt-get update<br>sudo apt-get -y install cuda<br></code></pre></td></tr></table></figure><p>等一切步骤走完即可</p><h2 id="安装Anaconda"><a href="#安装Anaconda" class="headerlink" title="安装Anaconda"></a>安装Anaconda</h2><h3 id="下载Anaconda安装包"><a href="#下载Anaconda安装包" class="headerlink" title="下载Anaconda安装包"></a>下载Anaconda安装包</h3><p>打开官网<a href="https://www.anaconda.com/products/distribution">https://www.anaconda.com/products/distribution</a>，下载Linux版本的Anaconda</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>运行安装文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash Anaconda3-2020.05-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>进入安装，有提示输入<code>Y</code>（yes），并继续按<code>enter</code>，等待安装完成。</p><h3 id="部署环境变量"><a href="#部署环境变量" class="headerlink" title="部署环境变量"></a>部署环境变量</h3><p>编辑profile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/profile<br></code></pre></td></tr></table></figure><p>在文件末加入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/home/yourname/anaconda3/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>保存退出重新加载环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h2 id="安装Python和PyTorch环境"><a href="#安装Python和PyTorch环境" class="headerlink" title="安装Python和PyTorch环境"></a>安装Python和PyTorch环境</h2><h3 id="conda创建环境"><a href="#conda创建环境" class="headerlink" title="conda创建环境"></a>conda创建环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda create -n envname python=3.10 <span class="hljs-comment">#创建基于python3.10的环境</span><br></code></pre></td></tr></table></figure><p>激活环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate envname<br></code></pre></td></tr></table></figure><h3 id="conda安装PyTorch"><a href="#conda安装PyTorch" class="headerlink" title="conda安装PyTorch"></a>conda安装PyTorch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu116<br></code></pre></td></tr></table></figure><h3 id="检查PyTorch和Cuda版本"><a href="#检查PyTorch和Cuda版本" class="headerlink" title="检查PyTorch和Cuda版本"></a>检查PyTorch和Cuda版本</h3><p>在envname环境下，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python<br></code></pre></td></tr></table></figure><p>打开python IDE，输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br></code></pre></td></tr></table></figure><p>然后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-built_in">print</span>(torch.__version__) <span class="hljs-comment">#检查torch版本</span><br>torch.cuda.is_available() <span class="hljs-comment">#TRUE说明CUDA生效</span><br>exit() <span class="hljs-comment">#退出Python IDE</span><br></code></pre></td></tr></table></figure><div class="note note-success">            <p> 对于最新版本的PyTorch，conda使用官方的代码，在cuda toolkit安装过程会失败（不显示cuda版本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda install pytorch torchvision torchaudio cudatoolkit=11.6 -c pytorch -c conda-forge<br></code></pre></td></tr></table></figure>          </div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://blog.csdn.net/Dteam_f/article/details/118390709">Win10使用Linux子系统(WSL2)进行深度学习训练</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://docs.microsoft.com/en-us/windows/ai/directml/gpu-cuda-in-wsl">Enable NVIDIA CUDA on WSL</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html#getting-started-with-cuda-on-wsl">CUDA on WSL User Guide</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/47733615">WSL 服务自动启动的正确方法</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:5" class="footnote-text"><span><a href="https://zhuanlan.zhihu.com/p/166102942">wsl安装anaconda</a><a href="#fnref:5" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:6" class="footnote-text"><span><a href="https://pytorch.org/get-started/locally/">Start Locally | PyTorch</a><a href="#fnref:6" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:7" class="footnote-text"><span><a href="https://blog.csdn.net/weixin_40852935/article/details/117791521">查看torch版本，cuda和pytorch版本是否匹配</a><a href="#fnref:7" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>软件技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Windows</tag>
      
      <tag>WSL</tag>
      
      <tag>Linux</tag>
      
      <tag>Conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
